{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "e9d88e0f",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "# Import statements; input files; arguments for plots"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "805f19ab",
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import matplotlib as mpl\n",
    "from matplotlib import pyplot as plt\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "from scipy import stats\n",
    "from scipy.stats import ranksums\n",
    "from statannotations.Annotator import Annotator\n",
    "import allel\n",
    "import random\n",
    "from IPython.display import FileLink"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "4b091f90",
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/jsilbert/opt/miniconda3/lib/python3.9/site-packages/openpyxl/styles/stylesheet.py:226: UserWarning: Workbook contains no default style, apply openpyxl's default\n",
      "  warn(\"Workbook contains no default style, apply openpyxl's default\")\n"
     ]
    }
   ],
   "source": [
    "# input files for clinical study comparison\n",
    "seq_metadata = pd.read_excel(\"seq-metadata.xlsx\")\n",
    "rdt_pcr = pd.read_csv(\"WellResult_qPCRrerun_20221201.csv\")\n",
    "genomes = pd.read_csv('sample_set_entity.tsv',sep='\\t') # also for MPHN2\n",
    "\n",
    "# input files for MPHN2\n",
    "MPHN2_pcr = pd.read_csv('2023-01-04 RDTs MPHN2 qPCR.xlsx - Results.csv',skiprows=40)\n",
    "\n",
    "# input files for synthetic comparisons\n",
    "elution = pd.read_csv(\"2022-07-11 145129 excel.xlsx - Elution_time_results.csv\")\n",
    "buffer = pd.read_csv(\"buffers.csv\",skiprows=50)\n",
    "rotation = pd.read_excel(\"2023-01-31 143709.xls\",skiprows=50)\n",
    "seeding = pd.read_excel(\"2023-02-07 repeat degradation.xlsx\",skiprows=40)\n",
    "KFFcomp = pd.read_excel(\"2023-03-08 Synthetic RDT KFF v Column.xlsx\",sheet_name='Results',skiprows=40)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "469fbb39",
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SignificanceResult(statistic=0.9145366931996783, pvalue=1.0064182644228368e-38)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(genomes.assembly_length_unambiguous, genomes.assembly_mean_coverage,'.')\n",
    "stats.spearmanr(genomes.assembly_length_unambiguous, genomes.assembly_mean_coverage)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c64a89c4",
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "args_boxplot = {'boxprops':dict(linestyle='-', linewidth=1.5, color='#00145A',fill=None),\n",
    "           'flierprops':dict(marker='o', markersize=2.2, linestyle='none'), \n",
    "           'whiskerprops':dict(color='#00145A'), 'capprops':dict(color='#00145A'),\n",
    "           'medianprops':dict(linewidth=1.5, linestyle='-', color='black') , 'width':0.4}\n",
    "\n",
    "args_stripplot = {'alpha':0.4, 'jitter':0.2, 'size':7, 'hue':\"variable\", 'palette':['grey']}\n",
    "\n",
    "args_scatterplot_2x = {'alpha':0.9, 'hue':\"variable\", 'palette':['grey','black']}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "034ba89c",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "# Functions used across multiple sections"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a3d17aea",
   "metadata": {
    "hidden": true
   },
   "source": [
    "Related to statistics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "3e781abf",
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "# define statistic (median) for permutation test\n",
    "def statistic(x, y):\n",
    "    return np.median(x) - np.median(y)\n",
    "\n",
    "# function to add in relevant p values for dataframes of \"melted\" style, with 'variable' and 'value' columns\n",
    "def get_pvalues2(df, pairs,wilcoxon=False):\n",
    "    # get pvalues for relevant comparisons in pairs\n",
    "    pvalues = []\n",
    "    df.dropna()\n",
    "    for p in pairs:\n",
    "        a,b = df[df.variable==p[0]][['value']], df[df.variable==p[1]][['value']]\n",
    "        if wilcoxon == True:\n",
    "            pvalues.append(stats.wilcoxon(a,b).pvalue[0])\n",
    "        else:\n",
    "            #pvalues.append(ranksums(a,b,nan_policy='omit').pvalue[0]) \n",
    "            pvalues.append(stats.permutation_test([a,b],statistic).pvalue[0]) \n",
    "    return pvalues\n",
    "\n",
    "# give 95% CI for slope\n",
    "def slope95CI(a,b,text): # compare linear regression between a and b; print text as description\n",
    "    results = stats.linregress(a,b)\n",
    "    print(f'Linregress Results for {text}:\\nslope = {results.slope:.2f}',\\\n",
    "         f'\\nCI = {results.slope-1.96*results.stderr:.2f} to {results.slope+1.96*results.stderr:.2f}',\\\n",
    "         f'\\np = {results.pvalue}\\n')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6164cdff",
   "metadata": {
    "hidden": true
   },
   "source": [
    "To clean up PCR results from ThermoFisher"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "d01344ea",
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "# take median, unless only one triplicate came back positive (in which case Na)\n",
    "def nanmedian(series):\n",
    "    if sum(series.isnull()*1)>1:\n",
    "        return pd.NA\n",
    "    else:\n",
    "        return series.median()\n",
    "    \n",
    "# function to take triplicate Ct results from qPCR, and return median for each sample\n",
    "def PCR_results(df):\n",
    "    # the columns are named differently depending upon how the file was downloaded from thermofisher\n",
    "    sample = 'Sample' if 'Sample' in df.columns else 'Sample Name'\n",
    "    ct = 'Cq' if 'Cq' in df.columns else 'CT'\n",
    "    \n",
    "    # set undetermined to nan, then take \"nanmedian\" (i.e. if 1 triplicate is \"positive\", treat as negative)\n",
    "    df[ct] = df[ct].replace('Undetermined', pd.NA)\n",
    "    aggregation_functions = {sample: 'first', ct: nanmedian}\n",
    "    df = df.groupby(df[sample]).aggregate(aggregation_functions).reset_index(inplace=False,drop=True)\n",
    "    \n",
    "    # set undetermined to 40\n",
    "    df[ct] = df[ct].replace(pd.NA, 40)\n",
    "    \n",
    "    return df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bd6c0035",
   "metadata": {
    "hidden": true
   },
   "source": [
    "Related to plotting figures"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "f80df3ab",
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "# save figure as...\n",
    "new_rc_params = {'text.usetex': False,\"svg.fonttype\": 'none'} # make text editable\n",
    "mpl.rcParams.update(new_rc_params)\n",
    "\n",
    "def save_figure(figname):\n",
    "    plt.tight_layout()\n",
    "    plt.savefig(figname)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "8b60f50c",
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "# add n=XX (number of data points) to box and whisker plots\n",
    "def add_n_XX(df,x,y,order,ax,offset,max=False):\n",
    "    df = df.dropna(subset=[y])\n",
    "    # Calculate number of obs per group & median to position labels\n",
    "    mins = df.groupby([x])[y].min()[order].values\n",
    "    if max==True:\n",
    "        mins = df.groupby([x])[y].max()[order].values\n",
    "    nobs = df[x].value_counts()[order].values\n",
    "    nobs = [str(i) for i in nobs.tolist()]\n",
    "    nobs = [\"n=\" + i for i in nobs]\n",
    "\n",
    "    # Add it to the plot\n",
    "    pos = range(len(nobs))\n",
    "    for tick,label in zip(pos,ax.get_xticklabels()):\n",
    "        ax.text(pos[tick], mins[tick]-offset, nobs[tick], horizontalalignment='center', size='medium')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "796f6a11",
   "metadata": {
    "hidden": true
   },
   "source": [
    "To save variances for all wilcoxon ranksum tests"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "e4ffc7a0",
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "# start to save variances for populations compared via wilcoxon\n",
    "df_wilcoxon = pd.DataFrame(columns=['Comparison','Group 1','Group Size (1)','Variance (1)',\\\n",
    "                                    'Group 2','Group Size (2)','Variance (2)'])\n",
    "def save_wilcoxon_variances(comparison_name, df, pairs, df_wilcoxon):\n",
    "    for p in pairs:\n",
    "        tmp0 = df[df.variable==p[0]].dropna(subset=['value'])\n",
    "        tmp1 = df[df.variable==p[1]].dropna(subset=['value'])\n",
    "        df_wilcoxon.loc[len(df_wilcoxon)] = \\\n",
    "        [comparison_name, p[0], len(tmp0), np.var(tmp0.value), p[1], len(tmp1), np.var(tmp1.value)]\n",
    "    return df_wilcoxon"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4245cd0c",
   "metadata": {},
   "source": [
    "# Cohort 1: clinical study"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8bfa64bd",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "## Dataframes"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4079255b",
   "metadata": {
    "hidden": true
   },
   "source": [
    "Clean up seq_metadata table"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "e387504e",
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "# Two dates were mistyped in the input file\n",
    "seq_metadata.loc[seq_metadata['Test Date']=='2022-08-18','Extraction Date'] = '2022-08-20'\n",
    "seq_metadata.loc[seq_metadata['Test Date']=='2022-08-15','Extraction Date'] = '2022-08-20'\n",
    "\n",
    "# set columns: ID number; Diagnosis date\n",
    "seq_metadata['ID']= seq_metadata['Broad tracking IDs'].squeeze().str.extract(pat = r'(\\d+)').iloc[:,0]\n",
    "seq_metadata.rename(columns={'Enter the date of your positive diagnosis if applicable':'Diagnosis'},inplace=True)\n",
    "\n",
    "# remove 3 individuals who weren't included in analyses\n",
    "seq_metadata = seq_metadata[seq_metadata['Broad tracking IDs'].squeeze().str.contains(pat='^15|02|03')== False]\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e4e6247b",
   "metadata": {
    "hidden": true
   },
   "source": [
    "Clean up rdt_value table"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "8e759a96",
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11_iH\n",
      "12_iH\n",
      "14_Q2_tube\n"
     ]
    }
   ],
   "source": [
    "# set up with Sample, ID, Cq columns\n",
    "rdt_value = rdt_pcr.copy()\n",
    "rdt_value['Sample'] = rdt_value['Sample'].str.replace('strip','str')\n",
    "rdt_value = PCR_results(rdt_value) # take medians of PCR triplicates\n",
    "rdt_value['ID'] = [s[0:2] for s in rdt_value['Sample']]\n",
    "\n",
    "# Exclude samples with Cts in same batch that were higher than the associated control\n",
    "Ct_04to06 = rdt_value[rdt_value.Sample == '04_05_06_H2O'].Cq.values[0]\n",
    "Ct_11to14 = rdt_value[rdt_value.Sample == '11_12_13_14_H2O'].Cq.values[0]\n",
    "for i in range(len(rdt_value)):\n",
    "    if (rdt_value.ID[i] in ['04','05','06']) and (rdt_value.Cq[i] > Ct_04to06) and (rdt_value.Cq[i] < 40):\n",
    "        rdt_value.loc[i,'Cq'] = np.nan\n",
    "        print(rdt_value.Sample[i])\n",
    "    if (rdt_value.ID[i] in ['11','12','13','14']) and (rdt_value.Cq[i] > Ct_11to14) and (rdt_value.Cq[i] < 40):\n",
    "        rdt_value.loc[i,'Cq'] = np.nan\n",
    "        print(rdt_value.Sample[i])\n",
    "rdt_value.dropna(subset=['Cq'],inplace=True)\n",
    "\n",
    "# Exclude fully negative individuals, and additional samples that were part of PCR test but not part of study\n",
    "rdt_value = rdt_value[rdt_value['Sample'].squeeze().str.contains(pat='^15|02|03|P_')== False]\n",
    "\n",
    "# Exclude non-clinical samples (i.e. PCR standards, water controls)\n",
    "rdt_value = rdt_value[rdt_value['Sample'].str.match(pat='^([0]?[1-9]|1[0-6])\\_[RBQi]')].reset_index(drop=True)\n",
    "rdt_value['ID'] = [s[0:2] for s in rdt_value.Sample]\n",
    "\n",
    "# Categorize test type\n",
    "rdt_value['variable'] = np.nan\n",
    "rdt_value.loc[np.where(rdt_value.Sample.str.contains(pat='Q.*_str'))[0], 'variable'] = 'Quickvue Strip'\n",
    "rdt_value.loc[np.where(rdt_value.Sample.str.contains(pat='B.*_str'))[0], 'variable'] = 'Binax Strip'\n",
    "rdt_value.loc[np.where(rdt_value.Sample.str.contains(pat='_iH'))[0], 'variable'] = 'iHealth'\n",
    "rdt_value.loc[np.where(rdt_value.Sample.str.contains(pat='_R'))[0], 'variable'] = 'PCR Swab'\n",
    "rdt_value.loc[np.where(rdt_value.Sample.str.contains(pat='Q.*_tube'))[0], 'variable'] = 'Quickvue Tube'\n",
    "rdt_value.loc[np.where(rdt_value.Sample.str.contains(pat='B.*_swab'))[0], 'variable'] = 'Binax Swab'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "256e9520",
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "12"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(rdt_value[rdt_value.Cq==40])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2f41c6f8",
   "metadata": {
    "hidden": true
   },
   "source": [
    "Compare group order (data frame: df_order) *and* collect each strip's difference from R (data frame: df_total_Cq)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "f818bf52",
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "first, second = [], [] # to store first & second test Ct\n",
    "iH, B, Q = [], [], [] # to store each strip's difference from R\n",
    "\n",
    "for ID in rdt_value.ID.unique():\n",
    "    # pull out RDT order from metadata\n",
    "    order = seq_metadata.Group[seq_metadata.ID==ID].values[0][3:].split(',')\n",
    "    # compare group order for all positive individuals who took 2 rapid tests & PCR swab\n",
    "    if sum(rdt_value[rdt_value.ID==ID].Sample.str.contains('r|R|i'))==3:\n",
    "        first.append(rdt_value[rdt_value['Sample'].str.fullmatch(pat=ID+'_'+order[0]+'[^w]*')==True].Cq.values[0])\n",
    "        second.append(rdt_value[rdt_value['Sample'].str.fullmatch(pat=ID+'_'+order[1]+'[^w]*')==True].Cq.values[0])\n",
    "    # look at difference of each strip from R\n",
    "    strips = rdt_value[rdt_value['Sample'].str.match(pat=ID+'.*(str|iH)')==True].reset_index()\n",
    "    R = rdt_value[rdt_value['Sample'].str.match(pat=ID+'.*R')==True].Cq.values[0]\n",
    "    for i in range(len(strips)):\n",
    "        if 'iH' in strips.Sample[i]:\n",
    "            iH.append(strips.Cq[i] - R)\n",
    "        elif 'B' in strips.Sample[i]:\n",
    "            B.append(strips.Cq[i] - R)\n",
    "        else:\n",
    "            Q.append(strips.Cq[i] - R)\n",
    "        \n",
    "df_order = pd.DataFrame({'First':first,'Second':second}).melt()\n",
    "df_total_Cq = pd.DataFrame.from_dict({'iHealth':iH,'Binax':B,'Quickvue':Q,'All':iH+B+Q}, orient='index').T"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7e36019f",
   "metadata": {
    "hidden": true
   },
   "source": [
    "Create file that combines Ct data with metadata re: diagnosis, test, & extraction dates, merging by ID"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "01ff7165",
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "dates = pd.merge(seq_metadata,rdt_value,how='right',on='ID')\n",
    "dates = dates[['Diagnosis','Test Date','Extraction Date','ID','Sample','Cq']]\n",
    "\n",
    "# add in date differences for diagnosis to test, test to extraction; & Ct minus Ct of corresponding PCR Swab\n",
    "dates['Days_Diagnosis_Test']  = [d.days for d in (dates['Test Date'] - dates['Diagnosis'])]\n",
    "dates['Days_Test_Extraction'] = [d. days for d in (dates['Extraction Date'] - dates['Test Date'])]\n",
    "dates['R_diff'] = [(dates.Cq[i]-dates[dates.Sample==(dates.ID[i]+'_R')].Cq).values[0] for i in range(len(dates))]\n",
    "\n",
    "# change \"variable\" to be larger categorical groups (i.e. RDT v. PCR, swab v. strip v. tube)\n",
    "dates['variable'] = [s.split('_')[-1] for s in dates.Sample]\n",
    "dates.variable = dates.variable.replace({'str':'Strip','iH':'Strip','R':'Polypropylene Swab'})"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a4c763a3",
   "metadata": {
    "hidden": true
   },
   "source": [
    "Clean up genomic data frame, and merge with other data frames"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "a97b198c",
   "metadata": {
    "hidden": true,
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "04_B1_str\n",
      "04_iH\n",
      "06_Q1_str\n",
      "06_iH\n",
      "13_B1_str\n",
      "13_B2_swab\n",
      "13_Q2_tube\n",
      "14_B1_str\n"
     ]
    }
   ],
   "source": [
    "genome_data_1 = genomes.rename(columns={\"entity:sample_set_id\": \"Sample\"}).copy()\n",
    "genome_data_1['Sample'] = [item[0].replace('strip','str') for item in genome_data_1['Sample'].str.split('.')]\n",
    "\n",
    "# merge with other dataframe to add in Cts\n",
    "genome_data_1 = pd.merge(genome_data_1, rdt_value, how='right', on='Sample')\n",
    "\n",
    "# set negative samples (i.e., Ct=40) to have a genome length of 0\n",
    "genome_data_1.loc[np.where(genome_data_1.Cq==40)[0],'assembly_length_unambiguous'] = np.nan\n",
    "\n",
    "# drop any genomes that are discarded due to being shorter than associated batch extraction control\n",
    "limit04_06 = genomes[genomes['entity:sample_set_id']=='04_05_06_H2O_l_B9'].assembly_length_unambiguous.values[0]\n",
    "limit11_14 = genomes[genomes['entity:sample_set_id']=='11_12_13_14_H2O_l_B11'].assembly_length_unambiguous.values[0]\n",
    "for i in range(len(genome_data_1)):\n",
    "    if genome_data_1.ID[i] in ['04','05','06']:\n",
    "        if genome_data_1.assembly_length_unambiguous[i] < limit04_06:\n",
    "            for column in genomes.columns[1:]:\n",
    "                genome_data_1.loc[i,column] = np.nan\n",
    "            print(genome_data_1.Sample[i])\n",
    "    elif genome_data_1.ID[i] in ['11','12','13','14']:\n",
    "        if genome_data_1.assembly_length_unambiguous[i] < limit11_14:\n",
    "            for column in genomes.columns[1:]:\n",
    "                genome_data_1.loc[i,column] = np.nan\n",
    "            print(genome_data_1.Sample[i])\n",
    "genome_data_1 = genome_data_1.dropna(subset=['assembly_length_unambiguous']).reset_index(drop=True)\n",
    "                \n",
    "# add column for % of genome assembled\n",
    "LENGTH = 29903\n",
    "genome_data_1['Percent'] = genome_data_1['assembly_length_unambiguous']/LENGTH\n",
    "\n",
    "# Strip, PCR Swab, or other\n",
    "genome_data_1['category'] = np.nan\n",
    "genome_data_1.loc[genome_data_1.variable=='PCR Swab','category'] = 'Polypropylene Swab'\n",
    "for strip in ['Quickvue Strip','Binax Strip','iHealth']:\n",
    "    genome_data_1.loc[genome_data_1.variable==strip,'category'] = 'Strip'"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fabab02c",
   "metadata": {},
   "source": [
    "## Box & whisker plots - Ct"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "13784168",
   "metadata": {},
   "outputs": [],
   "source": [
    "sns.set_style(\"white\")  # \"white\",\"dark\",\"darkgrid\",\"ticks\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "1036852f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean of all strips' difference: 10.15989620995116 \n",
      "\n",
      "p-value annotation legend:\n",
      "      ns: p <= 1.00e+00\n",
      "       *: 1.00e-02 < p <= 5.00e-02\n",
      "      **: 1.00e-03 < p <= 1.00e-02\n",
      "     ***: 1.00e-04 < p <= 1.00e-03\n",
      "    ****: p <= 1.00e-04\n",
      "\n",
      "iHealth vs. Binax: p=0.57\n",
      "Binax vs. Quickvue: p=0.074\n",
      "iHealth vs. Quickvue: p=0.13\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=[5,5])\n",
    "\n",
    "order = ['All','iHealth','Binax','Quickvue']\n",
    "df=pd.melt(df_total_Cq[order])\n",
    "ax = sns.boxplot(x=\"variable\", y=\"value\", order=order,data=df, **args_boxplot)\n",
    "sns.stripplot(data=pd.melt(df_total_Cq[order]), x=\"variable\", y=\"value\", **args_stripplot)\n",
    "add_n_XX(df,'variable','value',order,ax,offset=-.65,max=True)\n",
    "\n",
    "print('Mean of all strips\\' difference:', df_total_Cq.All.mean(),'\\n')\n",
    "\n",
    "pairs = [['iHealth','Binax'],['iHealth','Quickvue'],['Binax','Quickvue']]\n",
    "annotator = Annotator(ax, pairs,data=pd.melt(df_total_Cq),x='variable',y='value',order=order)\n",
    "#annotator.set_pvalues(get_pvalues2(df.dropna(),pairs))\n",
    "pvalues = get_pvalues2(df.dropna(),pairs)\n",
    "annotator.set_custom_annotations([f'p={p:.2g}' for p in pvalues])\n",
    "annotator.annotate()\n",
    "\n",
    "df_wilcoxon = save_wilcoxon_variances('Ct Difference from PCR', df, pairs, df_wilcoxon)\n",
    "\n",
    "plt.xlabel(\"Test Brand\", fontweight='normal', fontsize=12)\n",
    "plt.ylabel(\"Ct Difference from PCR Swab\", fontweight='normal', fontsize=12) \n",
    "plt.yticks(np.arange(5,25,5))\n",
    "ax.get_legend().remove();\n",
    "save_figure('fig/CT_difference_from_PCR.svg')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "a8149c06",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/jsilbert/opt/miniconda3/lib/python3.9/site-packages/scipy/stats/_morestats.py:3414: UserWarning: Exact p-value calculation does not work if there are zeros. Switching to normal approximation.\n",
      "  warnings.warn(\"Exact p-value calculation does not work if there are \"\n",
      "/Users/jsilbert/opt/miniconda3/lib/python3.9/site-packages/scipy/stats/_morestats.py:3428: UserWarning: Sample size too small for normal approximation.\n",
      "  warnings.warn(\"Sample size too small for normal approximation.\")\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "p-value annotation legend:\n",
      "      ns: p <= 1.00e+00\n",
      "       *: 1.00e-02 < p <= 5.00e-02\n",
      "      **: 1.00e-03 < p <= 1.00e-02\n",
      "     ***: 1.00e-04 < p <= 1.00e-03\n",
      "    ****: p <= 1.00e-04\n",
      "\n",
      "First vs. Second: p=0.26\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=[5,5])\n",
    "\n",
    "ax = sns.boxplot(x=\"variable\", y=\"value\", data=df_order,**args_boxplot)\n",
    "sns.stripplot(data=df_order, x=\"variable\", y=\"value\",**args_stripplot)\n",
    "add_n_XX(df_order,'variable','value',order=['First','Second'],ax=ax,offset=.5)\n",
    "\n",
    "ax.invert_yaxis()\n",
    "\n",
    "pairs = df_order.variable.unique()\n",
    "annotator = Annotator(ax, [pairs],data=df_order,x='variable',y='value')\n",
    "#annotator.set_pvalues([ranksums(first,second,nan_policy='omit').pvalue])\n",
    "#annotator.set_pvalues(get_pvalues2(df_order, [pairs],wilcoxon=True))\n",
    "pvalues = get_pvalues2(df_order, [pairs],wilcoxon=True)\n",
    "annotator.set_custom_annotations([f'p={p:.2g}' for p in pvalues])\n",
    "annotator.annotate()\n",
    "df_wilcoxon = save_wilcoxon_variances('Test Order', df_order, [pairs], df_wilcoxon)\n",
    "\n",
    "plt.xlabel(\"Test Order\", fontweight='normal', fontsize=12)\n",
    "plt.ylabel(\"Ct Values\", fontweight='normal', fontsize=12) \n",
    "plt.legend([],[], frameon=False)\n",
    "\n",
    "save_figure('fig/CT_test_order.svg')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fdf3f68c",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "##  Statistics for genome comparisons"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "246e1888",
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "# return relevant statistics in terms of how many samples had Cts, complete genomes, etc\n",
    "\n",
    "# update dataframes with columns that will enable groupby() analyses\n",
    "rdt_value['Ct<40'] = [g<40 for g in rdt_value.Cq]\n",
    "genome_data_1['Ct<40'] = [g<40 for g in genome_data_1.Cq]\n",
    "genomes_no40 = genome_data_1[genome_data_1['Ct<40']]\n",
    "genomes_no40['Percent>80'] = [g>.8 for g in genomes_no40.Percent]\n",
    "genomes_no40['Percent>10'] = [g>.10 for g in genomes_no40.Percent]\n",
    "\n",
    "# calculate the various stats we want\n",
    "genome_stats = pd.DataFrame({# Number & percent of samples with viral material, & total samples\n",
    "                            'NumberPositive':rdt_value.groupby('variable').sum()['Ct<40'],\\\n",
    "                            'NumberSamples':rdt_value.groupby('variable').count()['Cq'],\\\n",
    "                            # Ct range of positive samples, and mean\n",
    "                            'MinCt':rdt_value.groupby('variable').min()['Cq'],\\\n",
    "                            'MaxCt':rdt_value[rdt_value.Cq<40].groupby('variable').max()['Cq'],\\\n",
    "                            'MeanCt':rdt_value[rdt_value.Cq<40].groupby('variable').mean()['Cq'],\\\n",
    "                            # Number of sequenced samples; number & percent of samples with complete genomes\n",
    "                            'NumberSequenced':genomes_no40.groupby('variable').count()['Cq'],\\\n",
    "                            'NumberComplete':genomes_no40.groupby('variable').sum()['Percent>80'],\\\n",
    "                            'PercentComplete':genomes_no40.groupby('variable').mean()['Percent>80'],\\\n",
    "                            'NumPartial':genomes_no40.groupby('variable').sum()['Percent>10'],\\\n",
    "                            # Average percent of genome covered, for positive samples\n",
    "                            'AveragePercent':genomes_no40.groupby('variable').mean()['Percent'],\\\n",
    "                            # Average depth, for positive samples\n",
    "                            'AverageDepth':genomes_no40.groupby('variable').mean()['assembly_mean_coverage']})\n",
    "genome_stats['PercentWithCt'] = genome_stats['NumberPositive'] / genome_stats['NumberSamples'] * 100\n",
    "# update any percent stats to be from 0-100 instead of 0-1\n",
    "for percent in ['PercentComplete','AveragePercent']:\n",
    "    genome_stats[percent] = (genome_stats[percent]*100)\n",
    "# round all numbers to have only one decimal point\n",
    "genome_stats = genome_stats.round(decimals=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "84c10842",
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>NumberPositive</th>\n",
       "      <th>NumberSamples</th>\n",
       "      <th>MinCt</th>\n",
       "      <th>MaxCt</th>\n",
       "      <th>MeanCt</th>\n",
       "      <th>NumberSequenced</th>\n",
       "      <th>NumberComplete</th>\n",
       "      <th>PercentComplete</th>\n",
       "      <th>NumPartial</th>\n",
       "      <th>AveragePercent</th>\n",
       "      <th>AverageDepth</th>\n",
       "      <th>PercentWithCt</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>variable</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>PCR Swab</th>\n",
       "      <td>13</td>\n",
       "      <td>13</td>\n",
       "      <td>17.8</td>\n",
       "      <td>31.7</td>\n",
       "      <td>23.7</td>\n",
       "      <td>13</td>\n",
       "      <td>13</td>\n",
       "      <td>100.0</td>\n",
       "      <td>13</td>\n",
       "      <td>97.2</td>\n",
       "      <td>18463.2</td>\n",
       "      <td>100.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Binax Strip</th>\n",
       "      <td>5</td>\n",
       "      <td>9</td>\n",
       "      <td>27.6</td>\n",
       "      <td>33.8</td>\n",
       "      <td>30.3</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>22.8</td>\n",
       "      <td>44259.2</td>\n",
       "      <td>55.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Binax Swab</th>\n",
       "      <td>8</td>\n",
       "      <td>9</td>\n",
       "      <td>19.5</td>\n",
       "      <td>33.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>7</td>\n",
       "      <td>3</td>\n",
       "      <td>42.9</td>\n",
       "      <td>6</td>\n",
       "      <td>66.9</td>\n",
       "      <td>18257.6</td>\n",
       "      <td>88.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Quickvue Strip</th>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "      <td>25.8</td>\n",
       "      <td>35.2</td>\n",
       "      <td>29.6</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>40.0</td>\n",
       "      <td>4</td>\n",
       "      <td>66.0</td>\n",
       "      <td>21249.5</td>\n",
       "      <td>75.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Quickvue Tube</th>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>31.2</td>\n",
       "      <td>33.3</td>\n",
       "      <td>32.2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>100.0</td>\n",
       "      <td>1</td>\n",
       "      <td>93.0</td>\n",
       "      <td>5006.7</td>\n",
       "      <td>33.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>iHealth</th>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>30.8</td>\n",
       "      <td>34.3</td>\n",
       "      <td>33.2</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2</td>\n",
       "      <td>43.6</td>\n",
       "      <td>7487.0</td>\n",
       "      <td>83.3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                NumberPositive  NumberSamples  MinCt  MaxCt  MeanCt  \\\n",
       "variable                                                              \n",
       "PCR Swab                    13             13   17.8   31.7    23.7   \n",
       "Binax Strip                  5              9   27.6   33.8    30.3   \n",
       "Binax Swab                   8              9   19.5   33.0    26.0   \n",
       "Quickvue Strip               6              8   25.8   35.2    29.6   \n",
       "Quickvue Tube                2              6   31.2   33.3    32.2   \n",
       "iHealth                      5              6   30.8   34.3    33.2   \n",
       "\n",
       "                NumberSequenced  NumberComplete  PercentComplete  NumPartial  \\\n",
       "variable                                                                       \n",
       "PCR Swab                     13              13            100.0          13   \n",
       "Binax Strip                   2               0              0.0           1   \n",
       "Binax Swab                    7               3             42.9           6   \n",
       "Quickvue Strip                5               2             40.0           4   \n",
       "Quickvue Tube                 1               1            100.0           1   \n",
       "iHealth                       3               0              0.0           2   \n",
       "\n",
       "                AveragePercent  AverageDepth  PercentWithCt  \n",
       "variable                                                     \n",
       "PCR Swab                  97.2       18463.2          100.0  \n",
       "Binax Strip               22.8       44259.2           55.6  \n",
       "Binax Swab                66.9       18257.6           88.9  \n",
       "Quickvue Strip            66.0       21249.5           75.0  \n",
       "Quickvue Tube             93.0        5006.7           33.3  \n",
       "iHealth                   43.6        7487.0           83.3  "
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "genome_stats.reindex(['PCR Swab','Binax Strip','Binax Swab','Quickvue Strip','Quickvue Tube','iHealth'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "ec6e4536",
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>R_clade</th>\n",
       "      <th>R_pango</th>\n",
       "      <th>Str_clade</th>\n",
       "      <th>Str_pango</th>\n",
       "      <th>Clade</th>\n",
       "      <th>Pango</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>01</th>\n",
       "      <td>22B</td>\n",
       "      <td>BA.5.2.1</td>\n",
       "      <td>[22B, 22B]</td>\n",
       "      <td>[Unassigned, Unassigned]</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>04</th>\n",
       "      <td>22D</td>\n",
       "      <td>BA.2.75.2</td>\n",
       "      <td>[22D]</td>\n",
       "      <td>[Unassigned]</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>05</th>\n",
       "      <td>22B</td>\n",
       "      <td>BF.21</td>\n",
       "      <td>[]</td>\n",
       "      <td>[]</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>06</th>\n",
       "      <td>22B</td>\n",
       "      <td>BF.27</td>\n",
       "      <td>[22B]</td>\n",
       "      <td>[BF.27]</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>07</th>\n",
       "      <td>22B</td>\n",
       "      <td>BA.5.2.1</td>\n",
       "      <td>[22B, recombinant]</td>\n",
       "      <td>[BA.5.2.1, Unassigned]</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>08</th>\n",
       "      <td>22A</td>\n",
       "      <td>BA.4.6</td>\n",
       "      <td>[22A]</td>\n",
       "      <td>[BA.4.6]</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>09</th>\n",
       "      <td>22B</td>\n",
       "      <td>BA.5.2</td>\n",
       "      <td>[nan, recombinant, recombinant]</td>\n",
       "      <td>[nan, Unassigned, Unassigned]</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>22B</td>\n",
       "      <td>BE.1.1</td>\n",
       "      <td>[22B, 22B, 22B]</td>\n",
       "      <td>[Unassigned, BE.1.1, Unassigned]</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>22B</td>\n",
       "      <td>BE.1.1</td>\n",
       "      <td>[]</td>\n",
       "      <td>[]</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>22B</td>\n",
       "      <td>BF.26</td>\n",
       "      <td>[22B]</td>\n",
       "      <td>[BF.26]</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>22A</td>\n",
       "      <td>BA.4.6</td>\n",
       "      <td>[22A]</td>\n",
       "      <td>[BA.4.6]</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>22A</td>\n",
       "      <td>BA.4.6</td>\n",
       "      <td>[22A, 22A]</td>\n",
       "      <td>[BA.4.6, BA.4.6]</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>22B</td>\n",
       "      <td>BA.5.2</td>\n",
       "      <td>[22B]</td>\n",
       "      <td>[Unassigned]</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   R_clade    R_pango                        Str_clade  \\\n",
       "01     22B   BA.5.2.1                       [22B, 22B]   \n",
       "04     22D  BA.2.75.2                            [22D]   \n",
       "05     22B      BF.21                               []   \n",
       "06     22B      BF.27                            [22B]   \n",
       "07     22B   BA.5.2.1               [22B, recombinant]   \n",
       "08     22A     BA.4.6                            [22A]   \n",
       "09     22B     BA.5.2  [nan, recombinant, recombinant]   \n",
       "10     22B     BE.1.1                  [22B, 22B, 22B]   \n",
       "11     22B     BE.1.1                               []   \n",
       "12     22B      BF.26                            [22B]   \n",
       "13     22A     BA.4.6                            [22A]   \n",
       "14     22A     BA.4.6                       [22A, 22A]   \n",
       "16     22B     BA.5.2                            [22B]   \n",
       "\n",
       "                           Str_pango  Clade  Pango  \n",
       "01          [Unassigned, Unassigned]   True  False  \n",
       "04                      [Unassigned]   True  False  \n",
       "05                                []  False  False  \n",
       "06                           [BF.27]   True   True  \n",
       "07            [BA.5.2.1, Unassigned]   True   True  \n",
       "08                          [BA.4.6]   True   True  \n",
       "09     [nan, Unassigned, Unassigned]  False  False  \n",
       "10  [Unassigned, BE.1.1, Unassigned]   True   True  \n",
       "11                                []  False  False  \n",
       "12                           [BF.26]   True   True  \n",
       "13                          [BA.4.6]   True   True  \n",
       "14                  [BA.4.6, BA.4.6]   True   True  \n",
       "16                      [Unassigned]   True  False  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Clade    10\n",
      "Pango     7\n",
      "dtype: object\n",
      "Clade    0.769231\n",
      "Pango    0.538462\n",
      "dtype: object\n"
     ]
    }
   ],
   "source": [
    "# for which samples could clade/lineage be accurately predicted by RDTs without PCR swab?\n",
    "lineages = pd.DataFrame(index=genomes_no40.ID.unique(), \\\n",
    "                        columns=['R_clade','R_pango','Str_clade','Str_pango','Clade','Pango'])\n",
    "for i in lineages.index:\n",
    "    lineages['R_clade'].loc[i] = genomes_no40[genomes_no40.Sample==(i+\"_R\")].nextclade_clade.values[0]\n",
    "    lineages['R_pango'].loc[i] = genomes_no40[genomes_no40.Sample==(i+\"_R\")].pango_lineage.values[0]\n",
    "    lineages['Str_clade'].loc[i] = genomes_no40[genomes_no40.Sample.str.contains(pat=i+'_.*[^R]')].nextclade_clade.values\n",
    "    lineages['Str_pango'].loc[i] = genomes_no40[genomes_no40.Sample.str.contains(pat=i+'_.*[^R]')].pango_lineage.values\n",
    "    lineages['Clade'].loc[i] = lineages.R_clade[i] in lineages.Str_clade[i] \n",
    "    lineages['Pango'].loc[i] = lineages.R_pango[i] in lineages.Str_pango[i] \n",
    "\n",
    "display(lineages)\n",
    "print(lineages[['Clade','Pango']].sum())\n",
    "print(lineages[['Clade','Pango']].sum()/13)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "97142ce5",
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "_iH \n",
      " nextclade_clade    2\n",
      "pango_lineage      0\n",
      "dtype: int64 total: 3 \n",
      "\n",
      "Q.*_str \n",
      " nextclade_clade    4\n",
      "pango_lineage      3\n",
      "dtype: int64 total: 5 \n",
      "\n",
      "Q.*_tube \n",
      " nextclade_clade    1\n",
      "pango_lineage      1\n",
      "dtype: int64 total: 1 \n",
      "\n",
      "B.*_str \n",
      " nextclade_clade    1\n",
      "pango_lineage      0\n",
      "dtype: int64 total: 2 \n",
      "\n",
      "B.*_swab \n",
      " nextclade_clade    6\n",
      "pango_lineage      4\n",
      "dtype: int64 total: 7 \n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Above analysis but for each individual strip\n",
    "df = genomes_no40.set_index(genomes_no40.Sample)\n",
    "\n",
    "for pattern in ['_iH','Q.*_str','Q.*_tube','B.*_str', 'B.*_swab']:\n",
    "    strip = df[df.Sample.str.contains(pat=pattern)].Sample.values\n",
    "    swab = [i[0:2]+\"_R\" for i in strip]\n",
    "    df.loc[[s for s in df.Sample if (s in strip) or (s in swab)]][['nextclade_clade', 'pango_lineage']]\n",
    "    df1 = df.loc[[s for s in df.Sample if s in strip]][['nextclade_clade', 'pango_lineage']].reset_index(drop=True)\n",
    "    df2 = df.loc[[s for s in df.Sample if s in swab]][['nextclade_clade', 'pango_lineage']].reset_index(drop=True)\n",
    "    print(pattern, '\\n', (df1 == df2).sum(),'total:',len(df1),'\\n')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "630a5243",
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>R_clade</th>\n",
       "      <th>R_pango</th>\n",
       "      <th>Str_clade</th>\n",
       "      <th>Str_pango</th>\n",
       "      <th>Clade</th>\n",
       "      <th>Pango</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>01</th>\n",
       "      <td>22B</td>\n",
       "      <td>BA.5.2.1</td>\n",
       "      <td>[22B, 22B]</td>\n",
       "      <td>[Unassigned, Unassigned]</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>04</th>\n",
       "      <td>22D</td>\n",
       "      <td>BA.2.75.2</td>\n",
       "      <td>[22D]</td>\n",
       "      <td>[Unassigned]</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>05</th>\n",
       "      <td>22B</td>\n",
       "      <td>BF.21</td>\n",
       "      <td>[]</td>\n",
       "      <td>[]</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>06</th>\n",
       "      <td>22B</td>\n",
       "      <td>BF.27</td>\n",
       "      <td>[22B]</td>\n",
       "      <td>[BF.27]</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>07</th>\n",
       "      <td>22B</td>\n",
       "      <td>BA.5.2.1</td>\n",
       "      <td>[22B, recombinant]</td>\n",
       "      <td>[BA.5.2.1, Unassigned]</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>08</th>\n",
       "      <td>22A</td>\n",
       "      <td>BA.4.6</td>\n",
       "      <td>[22A]</td>\n",
       "      <td>[BA.4.6]</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>09</th>\n",
       "      <td>22B</td>\n",
       "      <td>BA.5.2</td>\n",
       "      <td>[nan, recombinant, recombinant]</td>\n",
       "      <td>[nan, Unassigned, Unassigned]</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>22B</td>\n",
       "      <td>BE.1.1</td>\n",
       "      <td>[22B, 22B, 22B]</td>\n",
       "      <td>[Unassigned, BE.1.1, Unassigned]</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>22B</td>\n",
       "      <td>BE.1.1</td>\n",
       "      <td>[]</td>\n",
       "      <td>[]</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>22B</td>\n",
       "      <td>BF.26</td>\n",
       "      <td>[22B]</td>\n",
       "      <td>[BF.26]</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>22A</td>\n",
       "      <td>BA.4.6</td>\n",
       "      <td>[22A]</td>\n",
       "      <td>[BA.4.6]</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>22A</td>\n",
       "      <td>BA.4.6</td>\n",
       "      <td>[22A, 22A]</td>\n",
       "      <td>[BA.4.6, BA.4.6]</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>22B</td>\n",
       "      <td>BA.5.2</td>\n",
       "      <td>[22B]</td>\n",
       "      <td>[Unassigned]</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   R_clade    R_pango                        Str_clade  \\\n",
       "01     22B   BA.5.2.1                       [22B, 22B]   \n",
       "04     22D  BA.2.75.2                            [22D]   \n",
       "05     22B      BF.21                               []   \n",
       "06     22B      BF.27                            [22B]   \n",
       "07     22B   BA.5.2.1               [22B, recombinant]   \n",
       "08     22A     BA.4.6                            [22A]   \n",
       "09     22B     BA.5.2  [nan, recombinant, recombinant]   \n",
       "10     22B     BE.1.1                  [22B, 22B, 22B]   \n",
       "11     22B     BE.1.1                               []   \n",
       "12     22B      BF.26                            [22B]   \n",
       "13     22A     BA.4.6                            [22A]   \n",
       "14     22A     BA.4.6                       [22A, 22A]   \n",
       "16     22B     BA.5.2                            [22B]   \n",
       "\n",
       "                           Str_pango  Clade  Pango  \n",
       "01          [Unassigned, Unassigned]   True  False  \n",
       "04                      [Unassigned]   True  False  \n",
       "05                                []  False  False  \n",
       "06                           [BF.27]   True   True  \n",
       "07            [BA.5.2.1, Unassigned]   True   True  \n",
       "08                          [BA.4.6]   True   True  \n",
       "09     [nan, Unassigned, Unassigned]  False  False  \n",
       "10  [Unassigned, BE.1.1, Unassigned]   True   True  \n",
       "11                                []  False  False  \n",
       "12                           [BF.26]   True   True  \n",
       "13                          [BA.4.6]   True   True  \n",
       "14                  [BA.4.6, BA.4.6]   True   True  \n",
       "16                      [Unassigned]   True  False  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Clade    10\n",
      "Pango     7\n",
      "dtype: object\n",
      "Clade    0.769231\n",
      "Pango    0.538462\n",
      "dtype: object\n"
     ]
    }
   ],
   "source": [
    "# Above analysis for iHealth strip only\n",
    "lineages = pd.DataFrame(index=genomes_no40.ID.unique(), \\\n",
    "                        columns=['R_clade','R_pango','Str_clade','Str_pango','Clade','Pango'])\n",
    "for i in lineages.index:\n",
    "    lineages['R_clade'].loc[i] = genomes_no40[genomes_no40.Sample==(i+\"_R\")].nextclade_clade.values[0]\n",
    "    lineages['R_pango'].loc[i] = genomes_no40[genomes_no40.Sample==(i+\"_R\")].pango_lineage.values[0]\n",
    "    lineages['Str_clade'].loc[i] = genomes_no40[genomes_no40.Sample.str.contains(pat=i+'_.*[^R]')].nextclade_clade.values\n",
    "    lineages['Str_pango'].loc[i] = genomes_no40[genomes_no40.Sample.str.contains(pat=i+'_.*[^R]')].pango_lineage.values\n",
    "    lineages['Clade'].loc[i] = lineages.R_clade[i] in lineages.Str_clade[i] \n",
    "    lineages['Pango'].loc[i] = lineages.R_pango[i] in lineages.Str_pango[i] \n",
    "\n",
    "display(lineages)\n",
    "print(lineages[['Clade','Pango']].sum())\n",
    "print(lineages[['Clade','Pango']].sum()/13)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "ea0f93d3",
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Sample</th>\n",
       "      <th>nextclade_clade</th>\n",
       "      <th>pango_lineage</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>01_B1_swab</td>\n",
       "      <td>22B</td>\n",
       "      <td>Unassigned</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>01_Q2_str</td>\n",
       "      <td>22B</td>\n",
       "      <td>Unassigned</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>01_R</td>\n",
       "      <td>22B</td>\n",
       "      <td>BA.5.2.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>04_B2_swab</td>\n",
       "      <td>22D</td>\n",
       "      <td>Unassigned</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>04_R</td>\n",
       "      <td>22D</td>\n",
       "      <td>BA.2.75.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>05_R</td>\n",
       "      <td>22B</td>\n",
       "      <td>BF.21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>06_Q2_tube</td>\n",
       "      <td>22B</td>\n",
       "      <td>BF.27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>06_R</td>\n",
       "      <td>22B</td>\n",
       "      <td>BF.27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>07_B2_swab</td>\n",
       "      <td>22B</td>\n",
       "      <td>BA.5.2.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>07_Q1_str</td>\n",
       "      <td>recombinant</td>\n",
       "      <td>Unassigned</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>07_R</td>\n",
       "      <td>22B</td>\n",
       "      <td>BA.5.2.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>08_B2_swab</td>\n",
       "      <td>22A</td>\n",
       "      <td>BA.4.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>08_R</td>\n",
       "      <td>22A</td>\n",
       "      <td>BA.4.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>09_B1_str</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>09_B2_swab</td>\n",
       "      <td>recombinant</td>\n",
       "      <td>Unassigned</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>09_R</td>\n",
       "      <td>22B</td>\n",
       "      <td>BA.5.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>09_iH</td>\n",
       "      <td>recombinant</td>\n",
       "      <td>Unassigned</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>10_B1_str</td>\n",
       "      <td>22B</td>\n",
       "      <td>Unassigned</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>10_B2_swab</td>\n",
       "      <td>22B</td>\n",
       "      <td>BE.1.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>10_R</td>\n",
       "      <td>22B</td>\n",
       "      <td>BE.1.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>10_iH</td>\n",
       "      <td>22B</td>\n",
       "      <td>Unassigned</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>11_R</td>\n",
       "      <td>22B</td>\n",
       "      <td>BE.1.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>12_Q1_str</td>\n",
       "      <td>22B</td>\n",
       "      <td>BF.26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>12_R</td>\n",
       "      <td>22B</td>\n",
       "      <td>BF.26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>13_Q1_str</td>\n",
       "      <td>22A</td>\n",
       "      <td>BA.4.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>13_R</td>\n",
       "      <td>22A</td>\n",
       "      <td>BA.4.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>14_B2_swab</td>\n",
       "      <td>22A</td>\n",
       "      <td>BA.4.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>14_Q1_str</td>\n",
       "      <td>22A</td>\n",
       "      <td>BA.4.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>14_R</td>\n",
       "      <td>22A</td>\n",
       "      <td>BA.4.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>16_R</td>\n",
       "      <td>22B</td>\n",
       "      <td>BA.5.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>16_iH</td>\n",
       "      <td>22B</td>\n",
       "      <td>Unassigned</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Sample nextclade_clade pango_lineage\n",
       "0   01_B1_swab             22B    Unassigned\n",
       "1    01_Q2_str             22B    Unassigned\n",
       "2         01_R             22B      BA.5.2.1\n",
       "3   04_B2_swab             22D    Unassigned\n",
       "4         04_R             22D     BA.2.75.2\n",
       "5         05_R             22B         BF.21\n",
       "6   06_Q2_tube             22B         BF.27\n",
       "7         06_R             22B         BF.27\n",
       "8   07_B2_swab             22B      BA.5.2.1\n",
       "9    07_Q1_str     recombinant    Unassigned\n",
       "10        07_R             22B      BA.5.2.1\n",
       "11  08_B2_swab             22A        BA.4.6\n",
       "12        08_R             22A        BA.4.6\n",
       "13   09_B1_str             NaN           NaN\n",
       "14  09_B2_swab     recombinant    Unassigned\n",
       "15        09_R             22B        BA.5.2\n",
       "16       09_iH     recombinant    Unassigned\n",
       "17   10_B1_str             22B    Unassigned\n",
       "18  10_B2_swab             22B        BE.1.1\n",
       "19        10_R             22B        BE.1.1\n",
       "20       10_iH             22B    Unassigned\n",
       "21        11_R             22B        BE.1.1\n",
       "22   12_Q1_str             22B         BF.26\n",
       "23        12_R             22B         BF.26\n",
       "24   13_Q1_str             22A        BA.4.6\n",
       "25        13_R             22A        BA.4.6\n",
       "26  14_B2_swab             22A        BA.4.6\n",
       "27   14_Q1_str             22A        BA.4.6\n",
       "28        14_R             22A        BA.4.6\n",
       "29        16_R             22B        BA.5.2\n",
       "30       16_iH             22B    Unassigned"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "genomes_no40[['Sample','nextclade_clade','pango_lineage']]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f2fa1ab0",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "## Gender and age distributions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "561a11c7",
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAWAAAAFgCAYAAACFYaNMAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAAsTAAALEwEAmpwYAAAVBklEQVR4nO3de3BU5RnH8d/mxi0w3EMlkSHQwNiSgtoBZDAgFioQWi5aLrOI2o7YlBa0FSURIqERrdAKRcNYEIxWazTWtFgKERW1QlOroq2AQAq5EGwgF7YJJGFP/+iYEYE0CC+Pm3w/M86Ek+z7PjvMfj2c7MXneZ4nAMAlF2Y9AAC0VgQYAIwQYAAwQoABwAgBBgAjEdYDfGro0KHq3bu39RgAcNGVlJRo586dZxz/0gS4d+/eys3NtR4DAC66KVOmnPU4lyAAwAgBBgAjBBgAjBBgADBCgAHACAEGACMEGACMEGAAMEKAAcAIAQYAI85eipybm6sXX3xRknTy5El99NFHeuutt9SpUydXWwJASHEW4ClTpjS+/vn+++/X1KlTiS8AfIbzSxAffPCB9u3bp+9973uutwKAkOL83dDWrl2rlJQU19vgS2LNmnUqKyu3HqNF6NWru1JSbrMeAw45DXB1dbUKCws1bNgwl9vgS6SsrFz9+o22HqNF2L//VesR4JjTSxAFBQUaPny4yy0AIGQ5DXBhYaFiY2NdbgEAIcvpJYjvf//7LpcHgJDGCzEAwAgBBgAjBBgAjBBgADBCgAHACAEGACMEGACMEGAAMEKAAcAIAQYAIwQYAIwQYAAwQoABwAgBBgAjBBgAjBBgADBCgAHACAEGACMEGACMEGAAMEKAAcAIAQYAIwQYAIwQYAAwQoABwAgBBgAjBBgAjBBgADBCgAHACAEGACMEGACMEGAAMEKAAcAIAQYAIxEuF1+7dq22bdum+vp6zZgxQzfeeKPL7QAgpDgL8M6dO/Xuu+/qmWeeUW1trdavX+9qKwAISc4C/OabbyohIUEpKSkKBAK6++67XW0FACHJWYArKipUWlqqrKwsFRcX64477tDmzZvl8/lcbQkAIcVZgDt37qz4+HhFRUUpPj5ebdq00bFjx9StWzdXWwJASHH2LIirrrpKb7zxhjzP05EjR1RbW6vOnTu72g4AQo6zM+DRo0eroKBA06ZNk+d5Wrx4scLDw11tBwAhx+nT0PjFGwCcGy/EAAAjBBgAjBBgADBCgAHACAEGACMEGACMEGAAMEKAAcAIAQYAIwQYAIwQYAAwQoABwAgBBgAjBBgAjBBgADBCgAHACAEGACMEGACMEGAAMEKAAcAIAQYAIwQYAIwQYAAwQoABwAgBBgAjBBgAjBBgADBCgAHACAEGACMEGACMEGAAMEKAAcAIAQYAIwQYAIxEuFx88uTJio6OliTFxsbqgQcecLkdAIQUZwE+efKkPM9Tdna2qy0AIKQ5uwSxe/du1dbW6tZbb9Xs2bP13nvvudoKAEKSszPgtm3b6rbbbtONN96of/3rX/rBD36gzZs3KyLiwrZcs2adysrKL9KUrVuvXt2VknKb9RhAq+UswH379lWfPn3k8/nUt29fde7cWf/+97/1la985YLWLSsrV79+oy/SlK3b/v2vWo8AtGrOLkE8//zzWr58uSTpyJEjCgQC6tGjh6vtACDkODsDnjZtmu69917NmDFDPp9PmZmZF3z5AQBaEmdFjIqK0ooVK1wtDwAhjxdiAIARAgwARggwABghwABghAADgBECDABGCDAAGCHAAGCEAAOAEQIMAEYIMAAYIcAAYIQAA4ARAgwARggwABghwABghAADgBECDABGCDAAGCHAAGCEAAOAEQIMAEYIMAAYIcAAYIQAA4ARAgwARggwABghwABghAADgBECDABGCDAAGCHAAGCEAAOAEQIMAEacBvjo0aNKSkrS/v37XW4DACHJWYDr6+u1ePFitW3b1tUWABDSnAX4wQcf1PTp09WzZ09XWwBASGtWgBctWnTGsXnz5p3z53Nzc9W1a1eNHDnyi08GAC1cRFPfXLJkiY4cOaJ33nlHx44dazze0NCgAwcOnPN2L7zwgnw+n95++2199NFHWrhwoR577DH16NHj4k0OACGuyQBPmzZNH3/8sfbs2aNx48Y1Hg8PD9eQIUPOebunn3668Wu/36/09HTiCwCf02SABw0apEGDBumaa65Rr169LtVMANAqNBngTx06dEg/+9nPVFVVJc/zGo//4Q9/+L+3zc7O/uLTAUAL1qwAL126VFOnTtUVV1whn8/neiYAaBWaFeDIyEjdcsstrmcBgFalWU9D++pXv6o9e/a4ngUAWpVmnQEXFRVp6tSpuuyyy9SmTZvG4825BgwAOLtmBXjBggWu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\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "## Gender and age demographics\n",
    "plt.figure(figsize=[5,5])\n",
    "\n",
    "sns.set_style(\"white\") \n",
    "gender_dist = sns.countplot(x=seq_metadata['What is your gender?'],color='darkblue', alpha=0.4,edgecolor='black')\n",
    "\n",
    "plt.xlabel(\"Gender\", fontweight='normal', fontsize=12)\n",
    "plt.ylabel(\"Count\", fontweight='normal', fontsize=12)\n",
    "\n",
    "save_figure('fig/cohort1_gender.svg')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "4c04656c",
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/jsilbert/opt/miniconda3/lib/python3.9/site-packages/seaborn/distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
      "  warnings.warn(msg, FutureWarning)\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAWAAAAFgCAYAAACFYaNMAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAAsTAAALEwEAmpwYAAAUD0lEQVR4nO3dfUyV9f/H8dfhTlRiJKmpFKnTyrJ1t6ykZGVompVmpDlsYqVJN7osBCE1jESzG52VNWvNWNaQma1VaMa0DFdNLS3N7rSkXJqGR9TDzfX747fOysghXz68OYfn4y+8mNfnzbXLp9cuzrmOz/M8TwCAFhdhPQAAtFUEGACMEGAAMEKAAcAIAQYAI1HWA/xlwIAB6tGjh/UYANDs9u7dq02bNv1re6sJcI8ePVRaWmo9BgA0u1GjRjW4nVsQAGCEAAOAEQIMAEYIMAAYIcAAYIQAA4ARAgwARggwABghwABghAADgBGnb0UeOXKk4uLiJElJSUl68sknXS4HACHFWYCPHz8uz/O0fPlyV0sAQEhzdgtix44dOnr0qDIzMzV+/Hht2bLF1VIAEJKcXQHHxsZq4sSJuv322/XTTz/pnnvu0fvvv6+oqOZdcsmSV1RZeaBZ99lSundPVFZWpvUYAIw4C3DPnj2VnJwsn8+nnj17KiEhQb///ru6devWrOtUVh5QcnJas+6zpezeXWY9AgBDzm5BlJSUaN68eZKkffv2ye/3q3Pnzq6WA4CQ4+wKePTo0crJydHYsWPl8/lUWFjY7LcfACCUOStiTEyMFi5c6Gr3ABDyeCMGABghwABghAADgBECDABGCDAAGCHAAGCEAAOAEQIMAEYIMAAYIcAAYIQAA4ARAgwARggwABghwABghAADgBECDABGCDAAGCHAAGCEAAOAEQIMAEYIMAAYIcAAYIQAA4ARAgwARggwABghwABghAADgBECDABGCDAAGCHAAGCEAAOAEQIMAEYIMAAYIcAAYIQAA4ARAgwARggwABghwABghAADgBECDABGCDAAGCHAAGCEAAOAEQIMAEYIMAAYIcAAYIQAA4ARAgwARggwABghwABghAADgBGnAT5w4IAGDRqk77//3uUyABCSnAW4pqZGjz32mGJjY10tAQAhzVmAi4qKNGbMGHXp0sXVEgAQ0pwEuLS0VJ06ddI111zjYvcAEBacBHjlypXauHGjMjIy9M033yg7O1u///67i6UAIGRFudhpcXFx8OuMjAzNnj1bnTt3drEUAIQsXoYGAEacXAH/3fLly10vAQAhiStgADBCgAHACAEGACMEGACMEGAAMEKAAcAIAQYAIwQYAIwQYAAwQoABwAgBBgAjBBgAjBBgADBCgAHACAEGACMEGACMEGAAMEKAAcAIAQYAIwQYAIwQYAAwQoABwAgBBgAjBBgAjBBgADBCgAHACAEGACMEGACMEGAAMEKAAcAIAQYAIwQYAIwQYAAwQoABwAgBBgAjBBgAjBBgADBCgAHACAEGACMEGACMEGAAMEKAAcAIAQYAIwQYAIwQYAAwQoABwAgBBgAjBBgAjBBgADBCgAHACAEGACNRrnZcV1envLw8/fjjj/L5fJozZ4769u3rajkACDnOroA/+ugjSdKKFSs0depUPfPMM66WAoCQ5OwKePDgwUpNTZUkVVZWKj4+3tVSABCSnAVYkqKiopSdna01a9Zo0aJFLpcKSZ9/vlkzZy6wHqNJundPVFZWpvUYQEhzGmBJKioq0vTp05Wenq53331XHTp0cL1kyPD7jys5Oc16jCbZvbvMegQg5Dm7B7xq1SotXbpUktS+fXv5fD5FRPCiCwD4i7Mr4LS0NOXk5GjcuHGqra1Vbm6uYmNjXS0HACHHWYA7dOig5557ztXuASDkcU8AAIwQYAAwQoABwEijApybm/uvbQ888ECzDwMAbclJfwk3a9Ys7du3T1988YX++OOP4Pba2lr98MMPzocDgHB20gCPHj1au3bt0s6dOzVkyJDg9sjISF1yySXOhwOAcHbSAPfv31/9+/fX1VdfrTPPPLOlZgKANqFRrwPes2ePHnnkEf3555/yPC+4/Z133nE2GACEu0YF+PHHH9dtt92mfv36yefzuZ4JANqERgU4OjpaEyZMcD0LALQpjXoZWp8+fbRz507XswBAm9KoK+Cff/5Zt912m7p376527doFt3MPGACarlEBnjZtmus5AKDNaVSA+TBNAGh+jQrwlVdeKZ/PJ8/zgq+C6Ny5s9avX+90OAAIZ40K8I4dO4Jf19TUqKys7B/bAACn7pSfhhYdHa3hw4frk08+cTEPALQZjboCPnToUPBrz/O0bds2VVVVuZoJANqEU74HLEmJiYmaOXOm08EAINyd8j1gAEDzaFSA6+vrtWzZMq1fv161tbUaOHCgJk+erKgoZ5/pCQBhr1G/hFu4cKEqKip01113acKECdq8ebPmz5/vejYACGuNuoTdsGGDVq5cqejoaElSamqqbr755gY/qggA0DiNugL2PC8YX0mKiYn5x58BAKeuUQE+77zzVFhYqD179mjPnj0qLCzk7ckA8D9qVIBnzZqlqqoqjRkzRunp6Tp48KDy8/NdzwYAYe2kAQ4EAsrOzlZFRYXmzZunjRs36qKLLlJkZKTi4uJaakYACEsnDfCiRYvk9/v/8QnIBQUFqqqq0uLFi50PBwDh7KQBLi8v18KFC5WYmBjc1rVrV82fP19r1651PhwAhLOTBjg6OlqxsbH/2h4XF6eYmBhnQwFAW3DSAEdERMjv9/9ru9/vV21trbOhAKAtOGmAb7rpJuXl5am6ujq4rbq6Wnl5eUpLS3M+HACEs5MG+K677tJpp52mgQMHKj09XaNHj9bAgQMVHx+vrKyslpoRAMLSSd+KHBERoYKCAk2aNElff/21IiIi1L9/f3Xt2rWl5gOAsNWoZ0EkJSUpKSnJ9SwA0Kac8kcSAQCaBwEGACMEGACMEGAAMEKAAcAIAQYAIwQYAIwQYAAwQoABwAgBBgAjBBgAjBBgADBCgAHACAEGACMEGACMEGAAMNKoB7KfqpqaGuXm5mrv3r0KBAK67777dP3117tYCgBClpMAr169WgkJCVqwYIEOHTqkW2+9lQADwAmcBHjo0KEaMmSIJMnzPEVGRrpYBmiTlix5RZWVB6zHaJLu3ROVlZVpPUar4STAHTt2lCT5/X49+OCDmjp1qotlgDapsvKAkpPTrMdokt27y6xHaFWc/RLu119/1fjx43XLLbdoxIgRrpYBgJDl5Ap4//79yszM1GOPPaarrrrKxRIAEPKcXAG/+OKLqqqq0vPPP6+MjAxlZGTo2LFjLpYCgJDl5Ao4Ly9PeXl5LnYNAGGDN2IAgBECDABGCDAAGCHAAGCEAAOAEQIMAEYIMAAYIcAAYIQAA4ARAgwARggwABghwABghAADgBECDABGCDAAGCHAAGCEAAOAEQIMAEYIMAAYIcAAYIQAA4ARAgwARggwABghwABghAADgBECDABGCDAAGCHAAGCEAAOAEQIMAEYIMAAYIcAAYIQAA4ARAgwARggwABghwABghAADgBECDABGCDAAGCHAAGCEAAOAEQIMAEYIMAAYIcAAYIQAA4ARAgwARggwABghwABghAADgBECDABGnAZ469atysjIcLkEAISsKFc7fvnll7V69Wq1b9/e1RIAENKcXQGfffbZWrx4savdA0DIc3YFPGTIEP3yyy+udg9jn3++WTNnLrAeo8l27fpWffr0tR6jST7/fKuSk9Osx2iSUD5vundPVFZWZrPu01mAEd78/uMhGwFJKi+v0ODBoTl/eXmF9QhNFsrnze7dZc2+T14FAQBGCDAAGHEa4KSkJL311lsulwCAkMUVMAAYIcAAYIQAA4ARAgwARggwABghwABghAADgBECDABGCDAAGCHAAGCEAAOAEQIMAEYIMAAYIcAAYIQAA4ARAgwARggwABghwABghAADgBECDABGCDAAGCHAAGCEAAOAEQIMAEYIMAAYIcAAYIQAA4ARAgwARggwABghwABghAADgBECDABGCDAAGCHAAGCEAAOAEQIMAEYIMAAYIcAAYIQAA4ARAgwARggwABghwABghAADgBECDABGCDAAGCHAAGCEAAOAEQIMAEYIMAAYIcAAYIQAA4CRKFc7rq+v1+zZs7Vz507FxMRo7ty5Sk5OdrUcAIQcZ1fAa9euVSAQ0JtvvqmHH35Y8+bNc7UUAIQkZwH+4osvdM0110iSLr74Ym3bts3VUgAQknye53kudjxz5kylpaVp0KBBkqTU1FStXbtWUVEN3/UYMGCAevTo4WIUADC1d+9ebdq06V/bnd0DjouL05EjR4J/rq+v/8/4SmpwOAAIZ85uQVx66aVav369JGnLli3q27evq6UAICQ5uwXx16sgvv32W3mep8LCQvXu3dvFUgAQkpwFGABwcrwRAwCMEGAAMEKAAcCIs5ehNUVNTY1yc3O1d+9eBQIB3XffferWrZsmTZqkc845R5I0duxYDRs2rEXnqqurU15enn788Uf5fD7NmTNH7dq104wZM+Tz+dSnTx/NmjVLEREt9/9ZQzPV1taaHytJOnDggEaNGqVXXnlFUVFRpsepoZmOHz/eKo7TyJEjFRcXJ0lKSkrSHXfcoSeeeEKRkZFKSUnR/fffbz7Tddddp6KiInXr1k2S9MADD+iKK65o0ZmWLl2qdevWqaamRmPHjtUVV1zRKs6pE+e64IILTv288lqRkpISb+7cuZ7ned7Bgwe9QYMGeW+99Za3bNky07nWrFnjzZgxw/M8z6uoqPAmT57sTZo0yauoqPA8z/Py8/O9srIy85law7EKBALelClTvLS0NO+7774zP04NzdQajtOxY8e8W2655R/bbr75Zm/37t1efX29d/fdd3vbt283n+npp5/23n///Rad4+8qKiq8SZMmeXV1dZ7f7/cWLVrUKs6phuZqynnVqm5BDB06VA899JAkyfM8RUZGatu2bSovL9e4ceOUm5srv9/f4nMNHjxYBQUFkqTKykrFx8dr+/btwSuBa6+9Vhs3bjSfqTUcq6KiIo0ZM0ZdunSRJPPj1NBMreE47dixQ0ePHlVmZqbGjx+vzz77TIFAQGeffbZ8Pp9SUlJa/FidONOWLVu0fft2rVy5UnfeeafmzZun2traFp3p448/Vt++fZWVlaXJkycrNTW1VZxTDc3VlPOqVQW4Y8eOiouLk9/v14MPPqipU6fqoosu0qOPPqri4mKdddZZWrJkiclsUVFRys7OVkFBgUaMGCHP8+Tz+YJzHz582Hwm62NVWlqqTp06BZ8BIsn8ODU0k/VxkqTY2FhNnDhRy5Yt05w5c5STk6P27dsHv29xrE6cafr06RowYIDy8/NVXFys6upqrVixokVnOnjwoLZt26bnnnsuOJP1OfVfczXlvGpV94Al6ddff1VWVpbuvPNOjRgxQlVVVYqPj5ck3XDDDcGrPgtFRUWaPn260tPTdfz48eD2I0eOBGe0nGnFihXq2rWrJJtjtXLlSvl8Pn366af65ptvlJ2drT/++CP4fYvj1NBML7zwgjp37izJ7pzq2bOnkpOT5fP51LNnT5122mk6dOhQ8PsWx+rEmRISEnTTTTcF7/9ef/31+uCDD1p0poSEBPXq1UsxMTHq1auX2rVrp99++y34fat/ew3NlZqaqsTEREmNP69a1RXw/v37lZmZqUceeUSjR4+WJE2cOFFffvmlJOnTTz/VBRdc0OJzrVq1SkuXLpUktW/fXj6fTxdeeGHw+RXr16/X5Zdfbj7T/fffb3qsiouL9frrr2v58uU6//zzVVRUpGuvvdb0ODU005QpU8zPqZKSkuAjWvft26ejR4+qQ4cO2rNnjzzP08cff9zix+rEmQ4fPqzbb789GDyLY3XZZZdpw4YN8jwveJyuuuoq03Pqv+a69957T/m8alXvhJs7d67ee+899erVK7ht6tSpWrBggaKjo3XGGWeooKAg+FvallJdXa2cnBzt379ftbW1uueee9S7d2/l5+erpqZGvXr10ty5cxUZGWk6U7du3VRQUGB6rP6SkZGh2bNnKyIiwvQ4NTTTsWPHzI9TIBBQTk6OKisr5fP5NH36dEVERKiwsFB1dXVKSUnRtGnTzGeqrq7Ws88+q9jYWPXu3Vt5eXmKjo5u0bnmz5+vTZs2yfM8TZs2TUlJSa3inDpxrk6dOp3yedWqAgwAbUmrugUBAG0JAQYAIwQYAIwQYAAwQoABwAgBRliqqalRSkqKJk6caD0K8J8IMMLSmjVrdO6552r79u36/vvvrccBGsTrgBGWMjIyNGzYMO3atUu1tbV6/PHHJUkvvfSSSkpK1LFjR11++eX68MMPtW7dOgUCAT311FP67LPPVFdXp379+ikvL8/sjSxoG7gCRtj57rvvtGXLFt1444269dZb9fbbb+vgwYPasGGDSktLVVJSotLSUh05ciT4d1566SVFRkaqtLRUq1evVpcuXfTUU08Z/hRoC1rdw3iA/9Ubb7yh1NRUJSQkKCEhQUlJSXrzzTe1f/9+DR06NPjwlnHjxqmiokKSVF5ersOHDwcfbVhTUxN8sArgCgFGWKmurtaqVavUrl07XXfddZIkv9+v4uJiDR8+XH+/4/b35wfU19crNzdXgwYNkvT/T9n6+xPvABe4BYGw8s477+j000/Xhg0btG7dOq1bt05r165VdXW1+vXrp7KysuDzY0tKSoJ/LyUlRcXFxQoEAqqvr1d+fr6efvppqx8DbQQBRlh54403NGHChH9c3cbHxysjI0Ovvfaa0tPTdccdd2jUqFE6fPhw8CHoU6ZMUY8ePTRy5EgNGzZMnudpxowZVj8G2gheBYE246uvvtLmzZs1fvx4SdKrr76qrVu36tlnn7UdDG0WAUab4ff7lZubqx9++EE+ny/4/OS/PkUEaGkEGACMcA8YAIwQYAAwQoABwAgBBgAjBBgAjPwf6arikuPUHXUAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=[5,5])\n",
    "\n",
    "age_dist = sns.distplot(x=seq_metadata['What is your age in years?'], hist=True, kde=False, \n",
    "             bins=int(30/5), color = 'darkblue', hist_kws={'edgecolor':'black'})\n",
    "plt.xlabel(\"Age\", fontweight='normal', fontsize=12)\n",
    "plt.ylabel(\"Count\", fontweight='normal', fontsize=12)\n",
    "\n",
    "save_figure('fig/cohort1_age.svg')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "95121b37",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "## iSNV analyses comparing RDTs and PCRs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "f52e0265",
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "# function to remove / mask known sites that are unreliable per ampseq methods\n",
    "prob_sites = allel.vcf_to_dataframe('problematic_sites_sarsCov2.vcf',fields=['POS','FILTER'])\n",
    "def masked_vcf(filename):\n",
    "    df = allel.vcf_to_dataframe(filename, fields=['POS','ALT','AF','SB'])\n",
    "    if df is None:\n",
    "        return df\n",
    "    problematic_sites = prob_sites.POS[prob_sites.FILTER_mask==True].values\n",
    "    return df[[i not in problematic_sites for i in df.POS]].reset_index(drop=True)\n",
    "\n",
    "# function to add columns to mark sites as 1) SNV (>50%) v. iSNV (<50%) & 2) >0 strand bias or AF<3%\n",
    "def mark_sites(df):\n",
    "    df['SNV'] = np.array(df.AF_1>=.5)\n",
    "    df['exclude'] = np.array(df.AF_1<.03) | np.array(df.SB>0)\n",
    "    return df\n",
    "\n",
    "# return dataframe for individual coverage plot (txt file); only return locations with DP>0 (or other value)\n",
    "def cleaned_cov(filename, DP=100):\n",
    "    df = pd.read_csv(filename, sep='\\t', header=None, names=['Ref','POS','DP'])\n",
    "    return df[df.DP>DP].reset_index(drop=True)\n",
    "\n",
    "# return counts of SNVs (or iSNVs) in following order, for a given set of PCR v. RDT comparison:\n",
    "# 0: number of (i)SNVs to include for PCR swab\n",
    "# 1: number of (i)SNVs to exclude for PCR swab\n",
    "# 2: number of (i)SNVs in RDT that are concordant with PCR\n",
    "# 3: number of (i)SNVs in RDT that were discordant with PCR\n",
    "# 4: number of (i)SNVs in RDT to exclude for RDT\n",
    "def SNV_counts(df_PCR_lim, df_RDT_lim, iSNV=False):\n",
    "    to_return = np.zeros(5)\n",
    "    # limit to either SNVs or iSNVs\n",
    "    if iSNV==False:\n",
    "        df_PCR_lim = df_PCR_lim[df_PCR_lim.SNV == True]\n",
    "        df_RDT_lim = df_RDT_lim[df_RDT_lim.SNV == True]\n",
    "    else:\n",
    "        # check first if any iSNVs are consensus-level in the other...\n",
    "        for i in range(len(df_PCR_lim)):\n",
    "            if ~df_PCR_lim.exclude[i]: # included in analysis...\n",
    "                if df_PCR_lim.SNV[i] == False: # and is iSNV...\n",
    "                    if df_PCR_lim.POS[i] in df_RDT_lim.POS.values: # and POS is in both...\n",
    "                        print(df_PCR_lim.POS[i])\n",
    "                    \n",
    "        df_PCR_lim = df_PCR_lim[df_PCR_lim.SNV == False]\n",
    "        df_RDT_lim = df_RDT_lim[df_RDT_lim.SNV == False]\n",
    "    \n",
    "    # pull out PCR numbers\n",
    "    to_return[0] = sum(~df_PCR_lim.exclude) # 0: number of (i)SNVs to include for PCR swab\n",
    "    to_return[1] = sum(df_PCR_lim.exclude) # 1: number of (i)SNVs to exclude for PCR swab\n",
    "    to_return[4] = sum(df_RDT_lim.exclude) # 4: number of (i)SNVs in RDT to exclude for RDT\n",
    "    df_RDT_lim = df_RDT_lim[~df_RDT_lim.exclude].reset_index(drop=True)\n",
    "    df_PCR_lim = df_PCR_lim[~df_PCR_lim.exclude].reset_index(drop=True)\n",
    "    SNVs_PCR = set([str(df_PCR_lim.POS[a])+df_PCR_lim.ALT_1[a] for a in range(len(df_PCR_lim))])\n",
    "    SNVs_RDT = set([str(df_RDT_lim.POS[a])+df_RDT_lim.ALT_1[a] for a in range(len(df_RDT_lim))])\n",
    "    to_return[2] = len(SNVs_PCR & SNVs_RDT) # 2: number of (i)SNVs in RDT that are concordant with PCR\n",
    "    to_return[3] = len(SNVs_RDT) - to_return[2] # 3: number of (i)SNVs in RDT that were discordant with PCR\n",
    "    \n",
    "    return to_return"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "e187e52f",
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "# curate all vcf files, all coverage_plot.txt files (dataframe with filename, Sample name, patient ID)\n",
    "vcf_files, cov_files = pd.DataFrame(), pd.DataFrame()\n",
    "vcf_files['filename'] = !ls ../vcf/*.vcf\n",
    "cov_files['filename'] = !ls ../covplot/*.txt\n",
    "\n",
    "for i, df in enumerate([vcf_files, cov_files]): # add in columns for Sample name & patient ID\n",
    "    df['Sample'] = [i[2].split('.')[0].replace('strip','str') for i in df.filename.str.split('/')]\n",
    "    df['ID'] = [s[0:2] for s in df.Sample]\n",
    "    \n",
    "# limit to files that were actually sequenced, and that have more than one sample per individual; cohort #1 only\n",
    "vcf_files = vcf_files[[s in list(genome_data_1[genome_data_1.Percent>0].Sample) for s in vcf_files.Sample]]\n",
    "cov_files = cov_files[[s in list(genome_data_1[genome_data_1.Percent>0].Sample) for s in cov_files.Sample]]\n",
    "vcf_files = vcf_files[[ID not in vcf_files.ID.unique()[vcf_files.groupby('ID').count()['Sample']==1] \\\n",
    "         for ID in vcf_files.ID]].reset_index(drop=True)\n",
    "cov_files = cov_files[[ID not in cov_files.ID.unique()[cov_files.groupby('ID').count()['Sample']==1] \\\n",
    "         for ID in cov_files.ID]].reset_index(drop=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "84505dec",
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5950\n"
     ]
    }
   ],
   "source": [
    "# initialize dataframe in which counts of SNVs will be stored\n",
    "df_counts = pd.DataFrame(columns=['PCR_include','PCR_exclude',\\\n",
    "                               'RDT_concord','RDT_discord','RDT_exclude'],\\\n",
    "                         index = ['SNV_RDT_tube','iSNV_RDT_tube',\\\n",
    "                                 'SNV_RDT_strip','iSNV_RDT_strip',\\\n",
    "                                 'SNV_RDT_swab','iSNV_RDT_swab'],\\\n",
    "                         data=0)\n",
    "\n",
    "# cycle through all PCR v. RDT comparisons, pausing on each PCR and comparing it to its corresponding RDTs\n",
    "# start by pulling out each PCR sample\n",
    "for _, row in vcf_files[vcf_files.filename.str.contains('_R')].iterrows():\n",
    "    f, Sample_PCR, ID = row\n",
    "    df_PCR = masked_vcf(f) # process PCR vcf file, while masking unreliable sites\n",
    "    df_PCR = mark_sites(df_PCR) # mark sites as SNV (>50%) v. iSNV (<50%); also as >0 SB or AF <3%\n",
    "    cov_PCR = cleaned_cov(cov_files[cov_files.Sample==Sample_PCR].filename.values[0]) # coverage plot\n",
    "    \n",
    "    # for loop to cycle through comparing the above PCR file to corresponding RDT files:\n",
    "    for _, row in vcf_files[vcf_files.ID==ID].iterrows():    \n",
    "        # repeat same process above from PCR for RDT\n",
    "        rdt, Sample, _ = row\n",
    "        if Sample != Sample_PCR:\n",
    "            df_RDT = masked_vcf(rdt)\n",
    "            if df_RDT is not None:\n",
    "                df_RDT = mark_sites(df_RDT) \n",
    "                cov_RDT = cleaned_cov(cov_files[cov_files.Sample==Sample].filename.values[0])\n",
    "\n",
    "                # what component of RDT? 0=buffer/tube, 1=strip, 2=swab\n",
    "                RDT_comp = ('s' in Sample)*1 + ('i' in Sample)*1 + ('w' in Sample)*1\n",
    "\n",
    "                # use coverage_plot.txt to limit analysis to regions of shared coverage\n",
    "                shared = set(cov_PCR.POS) & set(cov_RDT.POS)\n",
    "                df_PCR_lim = df_PCR[df_PCR.POS.isin(shared)].reset_index(drop=True)\n",
    "                df_RDT_lim = df_RDT[df_RDT.POS.isin(shared)].reset_index(drop=True)\n",
    "                \n",
    "                # also drop if it's dropped due to SB in the other one...\n",
    "                for i in range(len(df_PCR_lim)):\n",
    "                    if df_PCR_lim.SB[i]>0:\n",
    "                        if df_PCR_lim.POS[i] in df_RDT_lim.POS.values:\n",
    "                            df_RDT_lim.loc[df_RDT_lim.POS==df_PCR_lim.POS[i],'exclude']=True\n",
    "\n",
    "                for i in range(len(df_RDT_lim)):\n",
    "                    if df_RDT_lim.SB[i]>0:\n",
    "                        if df_RDT_lim.POS[i] in df_PCR_lim.POS.values:\n",
    "                            df_PCR_lim.loc[df_PCR_lim.POS==df_RDT_lim.POS[i],'exclude']=True\n",
    "\n",
    "                # add counts to df_counts dataframe, in appropriate positions\n",
    "                df_counts.iloc[RDT_comp*2] += SNV_counts(df_PCR_lim, df_RDT_lim, iSNV=False)\n",
    "                df_counts.iloc[RDT_comp*2+1] += SNV_counts(df_PCR_lim, df_RDT_lim, iSNV=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "5467e1a3",
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'SNVs')"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "width, space = .25, .02\n",
    "\n",
    "for i,label in enumerate(['SNV_RDT_swab','SNV_RDT_strip','SNV_RDT_tube']):\n",
    "    plt.bar(i-width/2-space,df_counts.PCR_include[label]+df_counts.PCR_exclude[label],\\\n",
    "            color='white',edgecolor='gray',width=width,label='Low-quality SNVs excluded from analyses')\n",
    "    plt.bar(i-width/2-space,df_counts.PCR_include[label],\\\n",
    "            color='k',edgecolor='k',width=width,label='High-quality SNVs from PCR swab')\n",
    "    plt.bar(i+width/2+space,df_counts.RDT_concord[label]+df_counts.RDT_discord[label]+\\\n",
    "            df_counts.RDT_exclude[label],\\\n",
    "           color='white',edgecolor='gray',width=width)\n",
    "    plt.bar(i+width/2+space,df_counts.RDT_concord[label]+df_counts.RDT_discord[label],\\\n",
    "           color='gray',edgecolor='gray',width=width,label='SNVs in RDT not seen in PCR')\n",
    "    plt.bar(i+width/2+space,df_counts.RDT_concord[label],\\\n",
    "           color='k',edgecolor='k',width=width)\n",
    "\n",
    "plt.xticks(ticks=[0-width/2-space,0+width/2+space,1-width/2-space,\\\n",
    "                  1+width/2+space,2-width/2-space,2+width/2+space],\\\n",
    "           labels=['PCR','RDT\\nswab','PCR','RDT\\nstrip','PCR','RDT\\ntube']);\n",
    "h, l = plt.gca().get_legend_handles_labels()\n",
    "plt.legend(h[0:3], l[0:3])\n",
    "plt.title('SNVs')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "f157b205",
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'iSNVs')"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "width, space = .25, .02\n",
    "\n",
    "for i,label in enumerate(['iSNV_RDT_swab','iSNV_RDT_strip','iSNV_RDT_tube']):\n",
    "    plt.bar(i-width/2-space,df_counts.PCR_include[label]+df_counts.PCR_exclude[label],\\\n",
    "            color='white',edgecolor='gray',width=width,label='Low-quality SNVs excluded from analyses')\n",
    "    plt.bar(i-width/2-space,df_counts.PCR_include[label],\\\n",
    "            color='k',edgecolor='k',width=width,label='High-quality SNVs from PCR swab')\n",
    "    plt.bar(i+width/2+space,df_counts.RDT_concord[label]+df_counts.RDT_discord[label]+\\\n",
    "            df_counts.RDT_exclude[label],\\\n",
    "           color='white',edgecolor='gray',width=width)\n",
    "    plt.bar(i+width/2+space,df_counts.RDT_concord[label]+df_counts.RDT_discord[label],\\\n",
    "           color='gray',edgecolor='gray',width=width,label='SNVs in RDT not seen in PCR')\n",
    "    plt.bar(i+width/2+space,df_counts.RDT_concord[label],\\\n",
    "           color='k',edgecolor='k',width=width)\n",
    "\n",
    "plt.xticks(ticks=[0-width/2-space,0+width/2+space,1-width/2-space,\\\n",
    "                  1+width/2+space,2-width/2-space,2+width/2+space],\\\n",
    "           labels=['PCR','RDT\\nswab','PCR','RDT\\nstrip','PCR','RDT\\ntube']);\n",
    "\n",
    "h, l = plt.gca().get_legend_handles_labels()\n",
    "plt.legend(h[0:3], l[0:3])\n",
    "plt.title('iSNVs')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "02d43f81",
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PCR_include</th>\n",
       "      <th>RDT_concord</th>\n",
       "      <th>RDT_discord</th>\n",
       "      <th>Concordancy</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>SNV_RDT_swab</th>\n",
       "      <td>115</td>\n",
       "      <td>115</td>\n",
       "      <td>0</td>\n",
       "      <td>100.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SNV_RDT_strip</th>\n",
       "      <td>151</td>\n",
       "      <td>151</td>\n",
       "      <td>4</td>\n",
       "      <td>97.419355</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SNV_RDT_tube</th>\n",
       "      <td>19</td>\n",
       "      <td>19</td>\n",
       "      <td>0</td>\n",
       "      <td>100.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>iSNV_RDT_swab</th>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "      <td>6.666667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>iSNV_RDT_strip</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>iSNV_RDT_tube</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                PCR_include  RDT_concord  RDT_discord  Concordancy\n",
       "SNV_RDT_swab            115          115            0   100.000000\n",
       "SNV_RDT_strip           151          151            4    97.419355\n",
       "SNV_RDT_tube             19           19            0   100.000000\n",
       "iSNV_RDT_swab             7            1            8     6.666667\n",
       "iSNV_RDT_strip            3            0            7     0.000000\n",
       "iSNV_RDT_tube             0            0            4     0.000000"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_pretty = df_counts.copy()\n",
    "df_pretty = df_pretty.reindex(index=['SNV_RDT_swab','SNV_RDT_strip','SNV_RDT_tube',\\\n",
    "          'iSNV_RDT_swab','iSNV_RDT_strip','iSNV_RDT_tube'])\n",
    "df_pretty = df_pretty[['PCR_include','RDT_concord','RDT_discord']]\n",
    "df_pretty['Concordancy'] = df_pretty.RDT_concord/(df_pretty.PCR_include+df_pretty.RDT_discord)*100\n",
    "df_pretty"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "888c33aa",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "# Cohort 2: MPHN2 senior housing outbreak"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "02f1a6aa",
   "metadata": {
    "heading_collapsed": true,
    "hidden": true
   },
   "source": [
    "## Data tables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "91b31c29",
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "# Samples to keep (other samples were SARS-CoV-2 negative per rapid tests)\n",
    "TOKEEP = [str(i) for i in [209,301,314,315,407,501,514,518,808,904]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "0448b674",
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "# clean up pcr data table\n",
    "MPHN2 = MPHN2_pcr\n",
    "MPHN2 = PCR_results(MPHN2).rename(columns={'Sample Name':'Sample','CT':'value'})\n",
    "MPHN2['value'] = MPHN2['value'].replace('Undetermined', 40)\n",
    "\n",
    "# add column for type & for ID\n",
    "MPHN2['variable'] = pd.Series([i[-1] for i in MPHN2.Sample.str.split('_')]).str.capitalize()\n",
    "MPHN2.loc[[t in [str(x) for x in range(6)] for t in MPHN2.variable],'variable'] = 'Water Control'\n",
    "MPHN2.loc[MPHN2.variable=='Liquid','variable'] = 'Buffer'\n",
    "MPHN2['ID'] = [MPHN2.Sample[i][0:3] if MPHN2.variable[i] in ['Swab','Buffer','Strip'] \\\n",
    "               else '' for i in range(len(MPHN2))]\n",
    "\n",
    "# drop samples that were already known as SARS-CoV-2 negative\n",
    "MPHN2 = MPHN2.drop([i for i in range(len(MPHN2)) if MPHN2.ID[i] not in TOKEEP]).reset_index(drop=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "a6d368c5",
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Sample</th>\n",
       "      <th>value</th>\n",
       "      <th>variable</th>\n",
       "      <th>ID</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>314_strip</td>\n",
       "      <td>40.0</td>\n",
       "      <td>Strip</td>\n",
       "      <td>314</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>904_strip</td>\n",
       "      <td>40.0</td>\n",
       "      <td>Strip</td>\n",
       "      <td>904</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Sample  value variable   ID\n",
       "7   314_strip   40.0    Strip  314\n",
       "28  904_strip   40.0    Strip  904"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MPHN2[MPHN2.value==40]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "6d7e7502",
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "# clean up genomic data to have standard ID/sample name\n",
    "genome_data_2 = genomes.rename(columns={'entity:sample_set_id':'Sample'}).copy()\n",
    "genome_data_2['Sample'] = [item[0] for item in genome_data_2['Sample'].str.split('.')]\n",
    "genome_data_2['ID'] = [s[0:3] for s in genome_data_2.Sample]\n",
    "\n",
    "# add extra metrics\n",
    "LENGTH = 29903\n",
    "genome_data_2['value'] = genome_data_2['assembly_length_unambiguous']/LENGTH\n",
    "genome_data_2['Percent>80'] = genome_data_2.value > .8\n",
    "\n",
    "# merge with other dataframe to limit to appropriate samples\n",
    "genome_data_2 = pd.merge(genome_data_2, MPHN2[['Sample','variable','value']].rename(columns={'value':'Cq'}),\\\n",
    "                       how='right', on='Sample')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "381497d9",
   "metadata": {
    "heading_collapsed": true,
    "hidden": true
   },
   "source": [
    "## Genome stats"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "9c296ed6",
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-37-e3d3cff5a21d>:6: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  genomes_no40['Percent>80'] = [g>.8 for g in genomes_no40.value]\n",
      "<ipython-input-37-e3d3cff5a21d>:7: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  genomes_no40['Percent>10'] = [g>.1 for g in genomes_no40.value]\n",
      "<ipython-input-37-e3d3cff5a21d>:15: FutureWarning: Dropping invalid columns in DataFrameGroupBy.min is deprecated. In a future version, a TypeError will be raised. Before calling .min, select only columns which should be valid for the function.\n",
      "  'MinCt':genomes_no40.groupby('variable').min()['Cq'],\\\n",
      "<ipython-input-37-e3d3cff5a21d>:16: FutureWarning: Dropping invalid columns in DataFrameGroupBy.max is deprecated. In a future version, a TypeError will be raised. Before calling .max, select only columns which should be valid for the function.\n",
      "  'MaxCt':genomes_no40.groupby('variable').max()['Cq'],\\\n"
     ]
    }
   ],
   "source": [
    "# return relevant statistics in terms of how many samples had Cts, complete genomes, etc\n",
    "\n",
    "# update dataframes with columns that will enable groupby() analyses\n",
    "genome_data_2['Ct<40'] = [g<40 for g in genome_data_2.Cq]\n",
    "genomes_no40 = genome_data_2[genome_data_2['Ct<40']]\n",
    "genomes_no40['Percent>80'] = [g>.8 for g in genomes_no40.value]\n",
    "genomes_no40['Percent>10'] = [g>.1 for g in genomes_no40.value]\n",
    "\n",
    "# calculate the various stats we want\n",
    "genome_stats = pd.DataFrame({# Number & percent of samples with viral material, & total samples\n",
    "                            'NumberPositive':genome_data_2.groupby('variable').sum()['Ct<40'],\\\n",
    "                            'NumberSamples':genome_data_2.groupby('variable').count()['Cq'],\\\n",
    "                            'PercentWithCt':genome_data_2.groupby('variable').mean()['Ct<40'],\\\n",
    "                            # Ct range of positive samples, and mean\n",
    "                            'MinCt':genomes_no40.groupby('variable').min()['Cq'],\\\n",
    "                            'MaxCt':genomes_no40.groupby('variable').max()['Cq'],\\\n",
    "                            'MeanCt':genomes_no40.groupby('variable').mean()['Cq'],\\\n",
    "                            # Number & percent of positive samples with complete genomes; & number sequenced\n",
    "                            'NumberSequenced':genomes_no40.groupby('variable').count()['Cq'],\\\n",
    "                            'NumberComplete':genomes_no40.groupby('variable').sum()['Percent>80'],\\\n",
    "                            'PercentComplete':genomes_no40.groupby('variable').mean()['Percent>80'],\\\n",
    "                            'NumPartial':genomes_no40.groupby('variable').sum()['Percent>10'],\\\n",
    "                            # Average percent of genome covered, for positive samples\n",
    "                            'AveragePercent':genomes_no40.groupby('variable').mean()['value'],\\\n",
    "                            # Average depth, for positive samples\n",
    "                            'AverageDepth':genomes_no40.groupby('variable').mean()['assembly_mean_coverage']})\n",
    "\n",
    "# update any percent stats to be from 0-100 instead of 0-1\n",
    "for percent in ['PercentWithCt','PercentComplete','AveragePercent']:\n",
    "    genome_stats[percent] = (genome_stats[percent]*100)\n",
    "# round all numbers to have only one decimal point\n",
    "genome_stats = genome_stats.round(decimals=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "9d48e280",
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>NumberPositive</th>\n",
       "      <th>NumberSamples</th>\n",
       "      <th>PercentWithCt</th>\n",
       "      <th>MinCt</th>\n",
       "      <th>MaxCt</th>\n",
       "      <th>MeanCt</th>\n",
       "      <th>NumberSequenced</th>\n",
       "      <th>NumberComplete</th>\n",
       "      <th>PercentComplete</th>\n",
       "      <th>NumPartial</th>\n",
       "      <th>AveragePercent</th>\n",
       "      <th>AverageDepth</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>variable</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Strip</th>\n",
       "      <td>8</td>\n",
       "      <td>10</td>\n",
       "      <td>80.0</td>\n",
       "      <td>30.8</td>\n",
       "      <td>35.2</td>\n",
       "      <td>33.0</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>12.5</td>\n",
       "      <td>6</td>\n",
       "      <td>42.6</td>\n",
       "      <td>5677.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Swab</th>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>100.0</td>\n",
       "      <td>20.2</td>\n",
       "      <td>34.2</td>\n",
       "      <td>27.6</td>\n",
       "      <td>10</td>\n",
       "      <td>9</td>\n",
       "      <td>90.0</td>\n",
       "      <td>10</td>\n",
       "      <td>95.1</td>\n",
       "      <td>17902.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Buffer</th>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>100.0</td>\n",
       "      <td>28.7</td>\n",
       "      <td>35.2</td>\n",
       "      <td>32.5</td>\n",
       "      <td>10</td>\n",
       "      <td>3</td>\n",
       "      <td>30.0</td>\n",
       "      <td>9</td>\n",
       "      <td>59.4</td>\n",
       "      <td>10437.7</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          NumberPositive  NumberSamples  PercentWithCt  MinCt  MaxCt  MeanCt  \\\n",
       "variable                                                                       \n",
       "Strip                  8             10           80.0   30.8   35.2    33.0   \n",
       "Swab                  10             10          100.0   20.2   34.2    27.6   \n",
       "Buffer                10             10          100.0   28.7   35.2    32.5   \n",
       "\n",
       "          NumberSequenced  NumberComplete  PercentComplete  NumPartial  \\\n",
       "variable                                                                 \n",
       "Strip                   8               1             12.5           6   \n",
       "Swab                   10               9             90.0          10   \n",
       "Buffer                 10               3             30.0           9   \n",
       "\n",
       "          AveragePercent  AverageDepth  \n",
       "variable                                \n",
       "Strip               42.6        5677.2  \n",
       "Swab                95.1       17902.3  \n",
       "Buffer              59.4       10437.7  "
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "genome_stats.loc[['Strip','Swab','Buffer']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "b14f9521",
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>R_clade</th>\n",
       "      <th>R_pango</th>\n",
       "      <th>Str_clade</th>\n",
       "      <th>Str_pango</th>\n",
       "      <th>Clade</th>\n",
       "      <th>Pango</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>209</th>\n",
       "      <td>22E</td>\n",
       "      <td>EF.1.2</td>\n",
       "      <td>[22E]</td>\n",
       "      <td>[Unassigned]</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>301</th>\n",
       "      <td>23A</td>\n",
       "      <td>XBB.1.5</td>\n",
       "      <td>[22F]</td>\n",
       "      <td>[Unassigned]</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>314</th>\n",
       "      <td>22E</td>\n",
       "      <td>EF.1.2</td>\n",
       "      <td>[nan]</td>\n",
       "      <td>[nan]</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>315</th>\n",
       "      <td>23A</td>\n",
       "      <td>XBB.1.5</td>\n",
       "      <td>[23A]</td>\n",
       "      <td>[XBB.1.5]</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>407</th>\n",
       "      <td>23A</td>\n",
       "      <td>XBB.1.5</td>\n",
       "      <td>[recombinant]</td>\n",
       "      <td>[Unassigned]</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>501</th>\n",
       "      <td>23A</td>\n",
       "      <td>XBB.1.5</td>\n",
       "      <td>[23A]</td>\n",
       "      <td>[Unassigned]</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>514</th>\n",
       "      <td>23A</td>\n",
       "      <td>XBB.1.5</td>\n",
       "      <td>[22F]</td>\n",
       "      <td>[Unassigned]</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>518</th>\n",
       "      <td>23A</td>\n",
       "      <td>XBB.1.5</td>\n",
       "      <td>[recombinant]</td>\n",
       "      <td>[Unassigned]</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>808</th>\n",
       "      <td>23A</td>\n",
       "      <td>XBB.1.5</td>\n",
       "      <td>[22F]</td>\n",
       "      <td>[Unassigned]</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>904</th>\n",
       "      <td>23A</td>\n",
       "      <td>XBB.1.5</td>\n",
       "      <td>[nan]</td>\n",
       "      <td>[Unassigned]</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    R_clade  R_pango      Str_clade     Str_pango  Clade  Pango\n",
       "209     22E   EF.1.2          [22E]  [Unassigned]   True  False\n",
       "301     23A  XBB.1.5          [22F]  [Unassigned]  False  False\n",
       "314     22E   EF.1.2          [nan]         [nan]  False  False\n",
       "315     23A  XBB.1.5          [23A]     [XBB.1.5]   True   True\n",
       "407     23A  XBB.1.5  [recombinant]  [Unassigned]  False  False\n",
       "501     23A  XBB.1.5          [23A]  [Unassigned]   True  False\n",
       "514     23A  XBB.1.5          [22F]  [Unassigned]  False  False\n",
       "518     23A  XBB.1.5  [recombinant]  [Unassigned]  False  False\n",
       "808     23A  XBB.1.5          [22F]  [Unassigned]  False  False\n",
       "904     23A  XBB.1.5          [nan]  [Unassigned]  False  False"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Clade    3\n",
      "Pango    1\n",
      "dtype: object\n",
      "Clade    0.230769\n",
      "Pango    0.076923\n",
      "dtype: object\n"
     ]
    }
   ],
   "source": [
    "# for which samples could clade/lineage be accurately predicted by RDTs without PCR swab? -- for strip\n",
    "lineages = pd.DataFrame(index=genome_data_2[[s in ['Buffer','Strip','Swab'] for s in genome_data_2.variable]].ID.unique(), \\\n",
    "                        columns=['R_clade','R_pango','Str_clade','Str_pango','Clade','Pango'])\n",
    "for i in lineages.index:\n",
    "    lineages['R_clade'].loc[i] = genome_data_2[genome_data_2.Sample==(i+\"_swab\")].nextclade_clade.values[0]\n",
    "    lineages['R_pango'].loc[i] = genome_data_2[genome_data_2.Sample==(i+\"_swab\")].pango_lineage.values[0]\n",
    "    lineages['Str_clade'].loc[i] = genome_data_2[genome_data_2.Sample.str.contains(pat=i+'_strip')].nextclade_clade.values\n",
    "    lineages['Str_pango'].loc[i] = genome_data_2[genome_data_2.Sample.str.contains(pat=i+'_strip')].pango_lineage.values\n",
    "    lineages['Clade'].loc[i] = lineages.R_clade[i] in lineages.Str_clade[i] \n",
    "    lineages['Pango'].loc[i] = lineages.R_pango[i] in lineages.Str_pango[i] \n",
    "\n",
    "display(lineages)\n",
    "print(lineages[['Clade','Pango']].sum())\n",
    "print(lineages[['Clade','Pango']].sum()/13)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "b3242094",
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>R_clade</th>\n",
       "      <th>R_pango</th>\n",
       "      <th>Str_clade</th>\n",
       "      <th>Str_pango</th>\n",
       "      <th>Clade</th>\n",
       "      <th>Pango</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>209</th>\n",
       "      <td>22E</td>\n",
       "      <td>EF.1.2</td>\n",
       "      <td>[22E]</td>\n",
       "      <td>[EF.1.2]</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>301</th>\n",
       "      <td>23A</td>\n",
       "      <td>XBB.1.5</td>\n",
       "      <td>[23A]</td>\n",
       "      <td>[Unassigned]</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>314</th>\n",
       "      <td>22E</td>\n",
       "      <td>EF.1.2</td>\n",
       "      <td>[nan]</td>\n",
       "      <td>[nan]</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>315</th>\n",
       "      <td>23A</td>\n",
       "      <td>XBB.1.5</td>\n",
       "      <td>[23A]</td>\n",
       "      <td>[XBB.1.5]</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>407</th>\n",
       "      <td>23A</td>\n",
       "      <td>XBB.1.5</td>\n",
       "      <td>[22F]</td>\n",
       "      <td>[Unassigned]</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>501</th>\n",
       "      <td>23A</td>\n",
       "      <td>XBB.1.5</td>\n",
       "      <td>[23A]</td>\n",
       "      <td>[XBB.1.5]</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>514</th>\n",
       "      <td>23A</td>\n",
       "      <td>XBB.1.5</td>\n",
       "      <td>[23A]</td>\n",
       "      <td>[XBB.1.5]</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>518</th>\n",
       "      <td>23A</td>\n",
       "      <td>XBB.1.5</td>\n",
       "      <td>[23A]</td>\n",
       "      <td>[Unassigned]</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>808</th>\n",
       "      <td>23A</td>\n",
       "      <td>XBB.1.5</td>\n",
       "      <td>[recombinant]</td>\n",
       "      <td>[Unassigned]</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>904</th>\n",
       "      <td>23A</td>\n",
       "      <td>XBB.1.5</td>\n",
       "      <td>[22F]</td>\n",
       "      <td>[Unassigned]</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    R_clade  R_pango      Str_clade     Str_pango  Clade  Pango\n",
       "209     22E   EF.1.2          [22E]      [EF.1.2]   True   True\n",
       "301     23A  XBB.1.5          [23A]  [Unassigned]   True  False\n",
       "314     22E   EF.1.2          [nan]         [nan]  False  False\n",
       "315     23A  XBB.1.5          [23A]     [XBB.1.5]   True   True\n",
       "407     23A  XBB.1.5          [22F]  [Unassigned]  False  False\n",
       "501     23A  XBB.1.5          [23A]     [XBB.1.5]   True   True\n",
       "514     23A  XBB.1.5          [23A]     [XBB.1.5]   True   True\n",
       "518     23A  XBB.1.5          [23A]  [Unassigned]   True  False\n",
       "808     23A  XBB.1.5  [recombinant]  [Unassigned]  False  False\n",
       "904     23A  XBB.1.5          [22F]  [Unassigned]  False  False"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Clade    6\n",
      "Pango    4\n",
      "dtype: object\n",
      "Clade    0.461538\n",
      "Pango    0.307692\n",
      "dtype: object\n"
     ]
    }
   ],
   "source": [
    "# for which samples could clade/lineage be accurately predicted by RDTs without PCR swab? -- for tube\n",
    "lineages = pd.DataFrame(index=genome_data_2[[s in ['Buffer','Strip','Swab'] for s in genome_data_2.variable]].ID.unique(), \\\n",
    "                        columns=['R_clade','R_pango','Str_clade','Str_pango','Clade','Pango'])\n",
    "for i in lineages.index:\n",
    "    lineages['R_clade'].loc[i] = genome_data_2[genome_data_2.Sample==(i+\"_swab\")].nextclade_clade.values[0]\n",
    "    lineages['R_pango'].loc[i] = genome_data_2[genome_data_2.Sample==(i+\"_swab\")].pango_lineage.values[0]\n",
    "    lineages['Str_clade'].loc[i] = genome_data_2[genome_data_2.Sample.str.contains(pat=i+'_liquid')].nextclade_clade.values\n",
    "    lineages['Str_pango'].loc[i] = genome_data_2[genome_data_2.Sample.str.contains(pat=i+'_liquid')].pango_lineage.values\n",
    "    lineages['Clade'].loc[i] = lineages.R_clade[i] in lineages.Str_clade[i] \n",
    "    lineages['Pango'].loc[i] = lineages.R_pango[i] in lineages.Str_pango[i] \n",
    "\n",
    "display(lineages)\n",
    "print(lineages[['Clade','Pango']].sum())\n",
    "print(lineages[['Clade','Pango']].sum()/13)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "c3cd2fd5",
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Sample</th>\n",
       "      <th>nextclade_clade</th>\n",
       "      <th>pango_lineage</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>209_liquid</td>\n",
       "      <td>22E</td>\n",
       "      <td>EF.1.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>209_strip</td>\n",
       "      <td>22E</td>\n",
       "      <td>Unassigned</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>209_swab</td>\n",
       "      <td>22E</td>\n",
       "      <td>EF.1.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>301_liquid</td>\n",
       "      <td>23A</td>\n",
       "      <td>Unassigned</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>301_strip</td>\n",
       "      <td>22F</td>\n",
       "      <td>Unassigned</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>301_swab</td>\n",
       "      <td>23A</td>\n",
       "      <td>XBB.1.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>314_liquid</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>314_swab</td>\n",
       "      <td>22E</td>\n",
       "      <td>EF.1.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>315_liquid</td>\n",
       "      <td>23A</td>\n",
       "      <td>XBB.1.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>315_strip</td>\n",
       "      <td>23A</td>\n",
       "      <td>XBB.1.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>315_swab</td>\n",
       "      <td>23A</td>\n",
       "      <td>XBB.1.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>407_liquid</td>\n",
       "      <td>22F</td>\n",
       "      <td>Unassigned</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>407_strip</td>\n",
       "      <td>recombinant</td>\n",
       "      <td>Unassigned</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>407_swab</td>\n",
       "      <td>23A</td>\n",
       "      <td>XBB.1.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>501_liquid</td>\n",
       "      <td>23A</td>\n",
       "      <td>XBB.1.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>501_strip</td>\n",
       "      <td>23A</td>\n",
       "      <td>Unassigned</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>501_swab</td>\n",
       "      <td>23A</td>\n",
       "      <td>XBB.1.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>514_liquid</td>\n",
       "      <td>23A</td>\n",
       "      <td>XBB.1.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>514_strip</td>\n",
       "      <td>22F</td>\n",
       "      <td>Unassigned</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>514_swab</td>\n",
       "      <td>23A</td>\n",
       "      <td>XBB.1.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>518_liquid</td>\n",
       "      <td>23A</td>\n",
       "      <td>Unassigned</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>518_strip</td>\n",
       "      <td>recombinant</td>\n",
       "      <td>Unassigned</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>518_swab</td>\n",
       "      <td>23A</td>\n",
       "      <td>XBB.1.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>808_liquid</td>\n",
       "      <td>recombinant</td>\n",
       "      <td>Unassigned</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>808_strip</td>\n",
       "      <td>22F</td>\n",
       "      <td>Unassigned</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>808_swab</td>\n",
       "      <td>23A</td>\n",
       "      <td>XBB.1.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>904_liquid</td>\n",
       "      <td>22F</td>\n",
       "      <td>Unassigned</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>904_swab</td>\n",
       "      <td>23A</td>\n",
       "      <td>XBB.1.5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Sample nextclade_clade pango_lineage\n",
       "0   209_liquid             22E        EF.1.2\n",
       "1    209_strip             22E    Unassigned\n",
       "2     209_swab             22E        EF.1.2\n",
       "3   301_liquid             23A    Unassigned\n",
       "4    301_strip             22F    Unassigned\n",
       "5     301_swab             23A       XBB.1.5\n",
       "6   314_liquid             NaN           NaN\n",
       "8     314_swab             22E        EF.1.2\n",
       "9   315_liquid             23A       XBB.1.5\n",
       "10   315_strip             23A       XBB.1.5\n",
       "11    315_swab             23A       XBB.1.5\n",
       "12  407_liquid             22F    Unassigned\n",
       "13   407_strip     recombinant    Unassigned\n",
       "14    407_swab             23A       XBB.1.5\n",
       "15  501_liquid             23A       XBB.1.5\n",
       "16   501_strip             23A    Unassigned\n",
       "17    501_swab             23A       XBB.1.5\n",
       "18  514_liquid             23A       XBB.1.5\n",
       "19   514_strip             22F    Unassigned\n",
       "20    514_swab             23A       XBB.1.5\n",
       "21  518_liquid             23A    Unassigned\n",
       "22   518_strip     recombinant    Unassigned\n",
       "23    518_swab             23A       XBB.1.5\n",
       "24  808_liquid     recombinant    Unassigned\n",
       "25   808_strip             22F    Unassigned\n",
       "26    808_swab             23A       XBB.1.5\n",
       "27  904_liquid             22F    Unassigned\n",
       "29    904_swab             23A       XBB.1.5"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "genomes_no40[['Sample','nextclade_clade','pango_lineage']]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f326b4ef",
   "metadata": {},
   "source": [
    "# Both cohorts: Ct comparisons"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c913e513",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "## Relevant dataframes "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "65e8c611",
   "metadata": {
    "hidden": true
   },
   "source": [
    "Create rdt dataframe with a few extra columns, to merge in eventually"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "9914945d",
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "rdt_new = rdt_value.copy().rename(columns={'Cq':'value'}).reset_index(drop=True)\n",
    "rdt_new['Brand'] = [a[1][0] for a in rdt_new['Sample'].str.split('_')]\n",
    "rdt_new['Component'] = [a[2] if len(a)==3 else np.nan for a in rdt_new['Sample'].str.split('_')]\n",
    "rdt_new['variable'] = [rdt_new.loc[a,'Brand'] + str(rdt_new.loc[a,'Component']) for a in range(len(rdt_new))]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6c1796c3",
   "metadata": {
    "hidden": true
   },
   "source": [
    "Combine MPHN2 and rdt_new to have all samples together in one dataframe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "22fa6ed3",
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "combined = MPHN2.append(rdt_new[['Sample','value','variable','ID']]).reset_index(drop=True)\n",
    "\n",
    "# now let's combine with genome length\n",
    "all_genome = genome_data_1.append(genome_data_2.rename(columns={'value':'Percent'}))\n",
    "all_genome = all_genome[['Sample','ID','assembly_length_unambiguous','Percent','pango_lineage']]\n",
    "combined = pd.merge(combined,all_genome,how='left',on=['Sample','ID'])\n",
    "\n",
    "# create categories to distinguish between cohorts and component (for now, just need cohort 1 strip)\n",
    "combined['category'] = np.nan\n",
    "combined.loc[combined.variable=='inan','category'] = 'Strip'\n",
    "combined.loc[combined.variable=='Bstr','category'] = 'Strip'\n",
    "combined.loc[combined.variable=='Qstr','category'] = 'Strip'"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "03b259fc",
   "metadata": {
    "hidden": true
   },
   "source": [
    "Comparisons of Ct difference for matched pairs: PCR v. RDT strip / swab; RDT strip v. swab / tube"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "8c236a4e",
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "# PCR v. RDT strip: for all cohort 1 strips (i.e. category=='Strip')\n",
    "PCR_minus_RDTstr = [combined[combined.Sample == combined.ID[i]+'_R'].value.values[0] - combined.value[i] \\\n",
    "                    for i in combined[combined.category=='Strip'].index]\n",
    "# PCR v. RDT swab: for cohort 1 Binax swabs\n",
    "PCR_minus_RDTswab = [combined[combined.Sample == combined.ID[i]+'_R'].value.values[0] - combined.value[i] \\\n",
    "                    for i in combined[combined.variable=='Bswab'].index]\n",
    "# RDT strip v. swab: first for cohort 1 BinaxNOW matched samples\n",
    "RDTswab_minus_RDTstr = [combined[combined.Sample.str.contains(combined.ID[i]+'_B.*swab')].value.values[0] - \\\n",
    "                        combined.value[i] for i in combined[combined.variable=='Bstr'].index \\\n",
    "                       if len(combined[combined.Sample.str.contains(combined.ID[i]+'_B.*swab')])]\n",
    "# second for cohort 2 iHealth matched samples\n",
    "RDTswab_minus_RDTstr.extend([combined[combined.Sample.str.contains(combined.ID[i]+'_swab')].value.values[0] - \\\n",
    "                             combined.value[i] for i in combined[combined.variable=='Strip'].index])\n",
    "# RDT strip v. tube: first for cohort 1 Quickvue matched samples\n",
    "RDTtube_minus_RDTstr = [combined[combined.Sample.str.contains(combined.ID[i]+'_Q.*tube')].value.values[0] - \\\n",
    "                        combined.value[i] for i in combined[combined.variable=='Qstr'].index \\\n",
    "                        if len(combined[combined.Sample.str.contains(combined.ID[i]+'_Q.*tube')])]\n",
    "# second for cohort 2 iHealth matched samples\n",
    "RDTtube_minus_RDTstr.extend([combined[combined.Sample.str.contains(combined.ID[i]+'_liquid')].value.values[0] - \\\n",
    "                             combined.value[i] for i in combined[combined.variable=='Strip'].index])\n",
    "\n",
    "d = {'PCR_minus_RDTstr':PCR_minus_RDTstr,'PCR_minus_RDTswab':PCR_minus_RDTswab,\\\n",
    "     'RDTswab_minus_RDTstr':RDTswab_minus_RDTstr,'RDTtube_minus_RDTstr':RDTtube_minus_RDTstr}\n",
    "Ctdiffs = pd.DataFrame(dict([ (k,pd.Series(v)) for k,v in d.items() ]))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bab1664c",
   "metadata": {
    "hidden": true
   },
   "source": [
    "Comparisons of genome length difference for matched pairs: PCR v. each strip brand&component"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "6f4c9c12",
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "d = {}\n",
    "for comp in ['Bswab','Bstr','Qtube','Qstr','inan']:\n",
    "    d[comp] = [combined.Percent[i] - combined[combined.Sample==combined.ID[i]+'_R'].Percent.values[0] \\\n",
    "               for i in combined[combined.variable==comp].index]\n",
    "\n",
    "Genome_diffs = pd.DataFrame(dict([ (k,pd.Series(v)) for k,v in d.items() ]))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6543ad39",
   "metadata": {
    "hidden": true
   },
   "source": [
    "Comparisons of genome length difference for matched pairs: PCR v. each RDT component"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "d6f5be47",
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "d = {'Strip':[]}\n",
    "for comp in ['Bswab','Bstr','Qtube','Qstr','inan']: #strip\n",
    "    d['Strip'].extend([combined.Percent[i] - combined[combined.Sample==combined.ID[i]+'_R'].Percent.values[0] \\\n",
    "               for i in combined[combined.variable==comp].index])\n",
    "d['Buffer'] = [combined.Percent[i] - combined[combined.Sample==combined.ID[i]+'_R'].Percent.values[0] \\\n",
    "               for i in combined[combined.variable=='Qtube'].index]\n",
    "d['Swab'] = [combined.Percent[i] - combined[combined.Sample==combined.ID[i]+'_R'].Percent.values[0] \\\n",
    "               for i in combined[combined.variable=='Bswab'].index]\n",
    "\n",
    "Genome_diffs2 = pd.DataFrame(dict([ (k,pd.Series(v)) for k,v in d.items() ]))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9461ab88",
   "metadata": {},
   "source": [
    "## Figures "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "6d7fc7c1",
   "metadata": {},
   "outputs": [],
   "source": [
    "sns.set_style('white')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "802c1ae2",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/jsilbert/opt/miniconda3/lib/python3.9/site-packages/scipy/stats/_morestats.py:3414: UserWarning: Exact p-value calculation does not work if there are zeros. Switching to normal approximation.\n",
      "  warnings.warn(\"Exact p-value calculation does not work if there are \"\n",
      "/Users/jsilbert/opt/miniconda3/lib/python3.9/site-packages/scipy/stats/_morestats.py:3428: UserWarning: Sample size too small for normal approximation.\n",
      "  warnings.warn(\"Sample size too small for normal approximation.\")\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "p-value annotation legend:\n",
      "      ns: p <= 1.00e+00\n",
      "       *: 1.00e-02 < p <= 5.00e-02\n",
      "      **: 1.00e-03 < p <= 1.00e-02\n",
      "     ***: 1.00e-04 < p <= 1.00e-03\n",
      "    ****: p <= 1.00e-04\n",
      "\n",
      "Bswab vs. Bstr: p=0.012\n",
      "Buffer vs. Strip: p=0.014\n",
      "Swab vs. Buffer: p=0.002\n",
      "Qstr vs. Qtube: p=0.068\n",
      "Swab vs. Strip: p=0.002\n",
      "Diff for iHealth strip & buffer: 1.89555\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 756x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# update dataframe to only include matched sets for Qstr & Qtube; Bswab & Bstr (cohort2 is already matched)\n",
    "df = combined.copy()\n",
    "for i in range(len(combined)):\n",
    "    for text in ['Q','Bs']: # check for matched Qstr & Qtube, then Bstr & Bswab sets\n",
    "        if text in df.loc[i].variable:\n",
    "            if sum([text in x for x in df[df.ID==df.loc[i].ID].variable]) < 2:\n",
    "                df.drop([i], inplace=True)\n",
    "            break # no need to check same location for other type of RDT\n",
    "order = ['Bswab', 'Bstr', 'Swab','Buffer','Strip','Qstr','Qtube']\n",
    "labels = ['Swab','Strip','Swab','Buffer','Strip','Strip','Buffer']\n",
    "\n",
    "f = plt.figure(figsize=[10.5,5])\n",
    "ax = sns.stripplot(data=df, x=\"variable\", y=\"value\", order=order, **args_stripplot)\n",
    "sns.boxplot(x=\"variable\", y=\"value\", data=df, order=order, **args_boxplot)\n",
    "\n",
    "ax.invert_yaxis()\n",
    "\n",
    "pairs = [['Bstr','Bswab'],['Buffer','Strip'],['Buffer','Swab'],['Swab','Strip'],['Qstr','Qtube']]\n",
    "annotator = Annotator(ax, pairs,order=order,data=df,x='variable',y='value')\n",
    "#annotator.set_pvalues(get_pvalues2(df,pairs,wilcoxon=True)) # do wilcoxon paired test\n",
    "pvalues = get_pvalues2(df,pairs,wilcoxon=True)\n",
    "annotator.set_custom_annotations([f'p={p:.2g}' for p in pvalues])\n",
    "annotator.annotate()\n",
    "#df_wilcoxon = save_wilcoxon_variances('Ct Values', df, pairs, df_wilcoxon)\n",
    "\n",
    "lspace, rspace=[60,60]\n",
    "ax.set_xlabel('\\nBinaxNOW'+lspace*' '+'iHealth'+rspace*' '+'Quickvue', fontsize=12)\n",
    "ax.set_xticklabels(labels)\n",
    "ax.set_ylabel('Ct Values', fontsize=12)\n",
    "ax.get_legend().remove()\n",
    "print('Diff for iHealth strip & buffer:',\n",
    "      df[df.variable=='Strip'].value.mean() - df[df.variable=='Buffer'].value.mean())\n",
    "\n",
    "add_n_XX(df,'variable','value',order,ax,offset=.7)\n",
    "\n",
    "save_figure('fig/CT_allbrands_allcomponents.svg')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "c0578407",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mean difference: -1.8955499999999996\n",
      "std: 1.9266354928994736\n"
     ]
    }
   ],
   "source": [
    "Cts_buffer_strip = df[[v in ['Strip','Buffer'] for v in df.variable]].value.values\n",
    "Cts_buffer = Cts_buffer_strip[np.arange(0,len(Cts_buffer_strip),2)]\n",
    "Cts_strip = Cts_buffer_strip[np.arange(1,len(Cts_buffer_strip),2)]\n",
    "print('mean difference:',np.mean(Cts_buffer-Cts_strip))\n",
    "print('std:',np.std(Cts_buffer-Cts_strip))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "35c9b470",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAuwAAAFgCAYAAADguizCAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAAsTAAALEwEAmpwYAABUBElEQVR4nO3deXxU1f0//tedNcss2ZPJQoBA2BH8IKiAYq0f61aUiogWa1WsX6ufapWqgCIKqK1aK/ixflptBKuiSKu2lqpVQUT9uYAaNQkkZF8m20xmMpn9/P6gmTJmJglZ5t4kr+fjYR+95965855wM3nNmXPPkYQQAkREREREpEgquQsgIiIiIqLoGNiJiIiIiBSMgZ2IiIiISMEY2ImIiIiIFIyBnYiIiIhIwTRyFzAQCxYsQE5OjtxlEBERERENmbq6Onz88cc92kdkYM/JycHu3bvlLoOIiIiIaMgsW7YsYjuHxBARERERKRgDOxGNGoFAAP/zP/+Dffv2hdp2796N5cuXY9myZXjiiSdkrI6IiGhgGNiJaFSorq7GlVdeia+++iqs7YUXXsCOHTuwa9cu+Hw++Hw+GaskIiI6cSNyDDsRjQ27d+/G3r174Xa7UV1djdWrV+Ozzz5DdXV16Biz2Yxt27bB5XJh8+bN+MMf/hDad+DAAcycORN33HEHmpubccMNN0Cr1crxUoiIiAZMlsD+xRdf4OGHH8aOHTtQVVWFO++8E5IkYfLkydiwYQNUKnb8E9ExTqcTTz/9NCorK3HDDTdgz549EY+bOnVqj7b29nZ8+umneOGFF+DxeHDFFVdgzpw5MJlMw102ERHRkIl5YP/DH/6A1157DfHx8QCABx54ALfccgsWLFiAe+65B//6179wzjnnxLosIlKo7iBusVjg9Xqxbt26iD3skSQlJWH+/PkwGAwwGAyYOHEiKisrMXv27JjUTkRENBRiHtjHjRuHrVu34le/+hUA4Ouvv8b8+fMBAGeccQY++OADBnYiCpEkKWx78+bN/X7sySefjOeffx4ejweBQADl5eUYN27cUJdIREQ0rGIe2M8991zU1taGtoUQoT/IiYmJcDgcsS6JiEapKVOm4Ec/+hFWrlwJIQRuvPFGJCUlyV0WERHRCZH9ptPjx6t3dnZybCkRhRy/gIRer8c777zT52MefPDBsO2rr74aV1999VCXFkYIAYfDASEEjEYj78MhIqIhJXtgnz59Oj7++GMsWLAA+/btw6mnnip3SURE/eZ0OlFRURGaLlKtVmPcuHFISUmRuTIiIhotZO8GuuOOO7B161asWLECPp8P5557rtwlEdEIIoRAR0cHhBAxf+5gMIjy8vKwud0DgQAqKyvh8XhiXg8REY1OsvSw5+bm4qWXXgIATJgwAc8995wcZRDRCCeEwC9/+UscPHgQc+fOxaOPPtrjJtXhZLfb4ff7I9bV2tqK7OzsmNVCRESjl+w97EREA+VwOHDw4EEEg0EcPHgw5jetBwKBAe0jIiI6EQzsRDRiGY1GzJ07FyqVCnPnzoXRaIzp8/d2k7zZbI5hJURENJrJftMpEdFASZKERx99FA6HA0ajMabDYQBAp9MhOzsb9fX1Ye3Jycmc8YqIiIYMAzsRjWiSJMkaji0WCwwGA9ra2hAMBpGUlMS53omIaEgxsBMRDZLRaIz5cBwiIho7OIadiIiIiEjBGNiJiIiIiBSMgZ2IiIiISMEY2ImIiIiIFIyBnYiIiIhIwRjYiYiIiIgUjIGdiIiIiEjBGNiJiIiIiBSMgZ2IiIiISMEY2ImIiIiIFIyBnYiIiIhIwRjYiYiIiIgUjIGdiIiIiEjBGNiJiIiIiBSMgZ2IiIiISMEY2ImIiIiIFIyBnYiIiIhIwRjYiYiIiIgUjIGdiIiIiEjBGNiJiIiIiBSMgZ2IiIiISMEY2ImIiIiIFIyBnYiIiIhIwRjYiYiIiIgUjIGdiIiIiEjBGNiJiIiIiBSMgZ2IiIiISMEY2ImIiIiIFIyBnYiIiIhIwTRyF0BENBw8Hg+sVis6Ozuh1+uRkZGBxMREucsiIiI6YQzsRDTquN1ulJSUIBAIAAA6OzvR3t6OgoICmM1mmasjIiI6MRwSQ0SjTkNDQyisdxNCoLa2VqaKiIiIBo497EQkm+0738czz+8d1DmarDYAQGZGUqgtIzkIdZTuiKa23QgKKeK+a644E1etWDyoeoiIiIaaYgL7JZdcAoPBAADIzc3FAw88IHNFRDQSNFjtAMIDezAoQa0SPY4VENCoAQHA5weAyMGdiIhISRQR2D0eD4QQ2LFjh9ylEFEMXbVi8aB7tJcs3QQAeO/V9aG21tZWVFZWhh3X1dUFn88Hk8kEANDpdJg4cSJvRCUiIsVTxBj2kpISdHV14ZprrsFVV12FQ4cOyV0SEY1gqampyM7Ohkp17C0uEAigq6sLRqMxdIzX68WRI0cQDAblKpOIiKhfFNHDHhcXh2uvvRbLly9HZWUlVq9ejT179kCjUUR5RDQCWSwWZGRkwOPxoL29HWq1uscxfr8fNpsNKSkpMlRIRETUP4pIxBMmTEB+fj4kScKECROQlJSE5uZmWCwWuUsjIpn5/X643W7o9XpotdoTeqxarUZCQgLa29t7PT8REZGSKSKw79q1C2VlZbj33nvR1NQEp9OJ9PR0ucsiIpnV1tbCarVCCAFJkpCSkoJx48aFhrr0l9FoRGNjY8R93WPaiYiIlEoRY9gvvfRSOBwOrFy5Erfeeiu2bNnC4TBEY5zVakVTUxOEODbbixACra2tqK+vP+FzmUwmJCUl9WjPyMhAXFzcYEslIiIaVopIxTqdDo888ojcZRCRgjQ3N0dsb2lpQU5ODiTpxKZknDhxItrb29He3h7qrY8U4omIiJRGEYGdiOi7oo0tDwQCoSEyJ6I7pPMGUyIiGmkUMSSGiOi7jp+C8XiJiYknPIadaCTYv38/Lr74YqxcuRL/+7//K3c5RKQg/KtHRIpksVh6TMUoSRJycnJkqoho+ASDQaxfvx5bt27FCy+8gIqKCnz66adyl0VECsEhMUSkSPHx8Zg2bRqsViu6urqg1+uRkZGB+Ph4uUsj6rfdu3dj7969cLvdqK6uxurVq/HZZ5+huro6dIzZbMbGjRthMpmQl5cHADj55JPx+eefY968eXKVTkQKwsBORIql1+tDAYZopHI6nXj66adRWVmJG264AXv27OlxjBACbrcb5eXlGD9+PPbt24epU6fKUC0RKREDOxER0TDqDt4WiwVerxfr1q3r0cO+bds2/PrXv8a9994LnU6HwsJCJCcny1UyESkMAzsREdEw+u6MRps3b4543P79+/H0009Dq9XipptuwrJly2JRHhGNAAzsRERECpCRkYHly5cjLi4OF110ESZPnix3SUSkEAzsREQ0Zvn9ftTV1aGtrQ1CCJjNZuTm5kKv1w/J+Y/vJdfr9XjnnXeiHnvZZZfhsssuG5LnJaLRhdM6EhHRmHXkyBG0tLQgGAxCCAGbzYaysjIEAgG5SyMiCmEPOxERjUkOhwOdnZ092r1eL9ra2pCenh7xcdt3vo9nnt87qOdustoAAJkZSYM6DwBcc8WZuGrF4kGfh4iUi4GdiIjGJLfbPaB9Q6HBagcwNIGdiEY/BnYiIhqTeluEq7d9V61YPOge7SVLNwEA3nt1/aDOQ0RjA8ewExHRmGQwGGA0Gnu06/V6pKSkyFAREVFkDOxERDRmFRQUICMjAxqNBmq1GqmpqSgsLIRKxT+PRKQcHBJDRERjllqtRl5eHvLy8uQuhYgoKnYhEBEREREpGAM7EREREZGCMbATERERESkYAzsRERERkYIxsBMRERERKRgDOxERERGRgnFaRyIiIpn5/X7YbDYAgNlshlarlbcgIlIUBnYiIiIZtbe34+jRoxBCAAAkSUJeXh7S09NlroyIlIJDYoiIiGTi9/vDwjoACCFQXV0Nj8cjY2VEpCTsYSeiAbll3Q4cKq6Su4xQDUuWbpK5kmPmzMzHY5tXyV0GjRDt7e1hYf27+7KysmJcEREpEQM7EQ3IoeIqHCquwpyZ+bLWkZVhlvX5j6eEDzA0skQL6wAQDAZjWAkRKRkDOxEN2JyZ+Xjv1fVyl6EYSunlp5EjKSkJNTU1EfclJyfHuBoiUiqOYSciIpKJTqdDbm5uj/asrCzEx8fLUBERKRF72ImIiGSUmZkJk8kUGs+enJyMhIQEucsiIgVhDzsREZHM4uPjkZ2djZycHIZ1GhECgQD+53/+B/v27Qu1bdq0CcuWLcOqVavwxRdfyFjd6MPATkSycLvdcDqdCAQCcpdCREQnoLq6GldeeSW++uqrUNu7776Lo0ePYteuXfjd736HjRs3yljh6MMhMUQUUz6fD0ePHoXD4QAAqFQqZGdnIzMzU+bKiIjGrt27d2Pv3r1wu92orq7G6tWr8dlnn6G6ujp0jNlsxrZt2+ByubB582b84Q9/CO07cuQIFi9eDJVKhZSUFKjVajQ3N3MBsCHCwE5EMVVZWRkK68Cxqetqa2sRHx8Pk8kkY2VERGOb0+nE008/jcrKStxwww3Ys2dPxOOmTp3ao23atGn405/+hCuvvBKNjY04cuQIurq6hrvkMYOBnYhixuv1oqOjI+K+5uZmBnYiIhl1B3GLxQKv14t169ZF7GGPZNGiRfjqq6+watUqTJ48GTNmzEBSUlIsyh4TGNiJKGb8fv+A9hER0fCTJClse/Pmzf1+7NGjR2GxWPDiiy+ioaEBv/rVr9gJM4QY2IkoZuLj46HRaCKGc6PRKENFREQ0FLKzs/Hoo4/i+eefh16vxz333CN3SaMKAzsRxYwkScjNzUVlZWVYu16vR0ZGBgDAZrOhubkZXq8XBoMBWVlZ0Ov1Q/L8fr8fjY2N6OjogFqtRmpqKtLS0obk3EREw0UIgebmZrS1tSEYDCIpKQmZmZlQq9VD9hzLli0L/X+9Xo933nmnz8c8+OCDYY/ZunXrkNVD4RQR2IPBIO69916UlpZCp9Nh06ZNyM/Pl7ssIhoGqamp0Ov1aGlpgc/ng9FoRFpaGjQaDaxWK44ePQqXywUAcDgcsNlsmDp16qBDeyAQQElJCTweT6jN6XSiq6sLeXl5gzo3EdFwqqysRFtbW2i7q6sLdrsdU6ZMgUrFGbrHAkUE9rfffhterxc7d+7EoUOH8OCDD+LJJ5+UuywiGiYGgwEGgyGsLRgM4vDhw7BarRBCAADa29uRlJSEpqYmjBs3blDP2draGhbWu1mtVmRmZkKn0w3q/EREw6GrqyssrHdzuVxob29HamqqDFVRrCniY9lnn32GxYsXAwDmzJmD4uLiXo9vbW3FoUOHABzrNSsqKsKXX34J4Ngcz0VFRaFzuN1uFBUV4dtvvwVw7AIvKipCaWkpgGM9bEVFRThy5AgAwG63o6ioCBUVFQCOBYaioqLQV/gtLS0oKipCTU0NgGN/7IuKilBXVwcAaGxsRFFRERobGwEAdXV1KCoqgtVqBQDU1NSgqKgILS0tAI59ai4qKkJ7ezsAoKKiAkVFRbDb7QCOzWtaVFQEp9MJACgtLUVRUVGoB/Lbb79FUVER3G43AKC4uBhFRUXw+XwAgC+//BJFRUWhxWkOHTqEoqKisJ/99u3bQ9uffPIJnnvuudD2Rx99hBdeeCG0feDAAezcuTO0vX//fuzatSu0vXfvXuzevTu0/e677+Kvf/1raPvtt9/G66+/Htp+88038fe//z20vWfPnrBppP7+97/jzTffDG2//vrrePvtt0Pbf/3rX/Huu++Gtrvnke22a9cu7N+/P7S9c+dOHDhwILT9wgsv4KOPPgptP/fcc/jkk09C29u3b8dnn30W2i4qKuK19+9rr9NhRWP150N27X3wwQf46KOPQmG9paUFlZWVsNlsaGtrC7v2AoEA3nnnnbBrsa9rb9++faF/KwD4+uuvQ9sul2tIrj1by9HQNq89vu91i/S+19pUGtrm+x6vvW6Rrr2XX345tH3kyJGwf5sPPvig39fe9p3vY/ZpV2PWqauwZOkmLFm6CbNP+wlmn/aT0PasU1dh9mlXh7ZnLvgxTjr9p//Znn8Fxk2/DNNOux1Llm7CjFNWYs7Ca0P7Z5xyOeYuWh3anj5vBeYuvv4/2/91GU5e/DMsWboJ23e+z2svwrUXjSICu9PpDOttU6vVnDGCaIzxer1R9x3fM97Y2Igvv/wSzc3NsNvtKC8v79dqqd1jPb1eL5qamuBwONDZ2YnW1tYhHQdKNFyCwSBaW1vhcrnQ1dUV+nBLo1tvQ17kGA7TZutEg9Ue8+cd6yShgN/4Bx54ACeddBLOP/98AMAZZ5yBffv2RT1+2bJlYZ8oiSj2pp78IzRWf445M4fmfpP4+HhkZ2dDq9X22Ge1WtHW1oa4uDgkJyf32N/V1QWbzdbr+dVqNTIzM3tMMxYIBNDa2hrxK+cTdai4ClnjTkbJ568M+lw0ui1ZugkA8N6r6/t1vNfrRVlZWdiH17i4OBQWFkb8naHRQwiBb775JtSr302tVmPGjBkx//c/0WuXTky0jKuIHvaTTz45FNAPHTqEwsJCmSsioljzeDxwuVxhPe1CCHR1dYUWW0pMTIz42Pj4+B7zB39XIBBAV1cXgsFgqM3v98PlckGv10OjUcQtPUQR1dbW9rgHw+12h76ep9FLkiRMnjw5rLMhISEBkydP5oe1MUQRf6HOOeccfPDBB7j88sshhMCWLVvkLomI+pCVNxdZeXOHtJeltbUVVVVVCAQCCAaDUKvVyMnJgcViAQB88803UZe6njlzZp8zyRw9ehRtbW3w+/2QJClsKExBQcGgV+Xr7nki5bpl3Q4cKq6Su4xQDf29ZiypwYjtQgCNbYPve5szMx+PbV416PPQ8NDpdJg8eTL8fj+CwSBvkh+DFBHYVSoV7rvvPrnLICKZpaamwmg0or29HUIIJCUlIS4uLrTfYDBEDOw6na5ff8Di4+MBIGJvevc+Gt0OFVfhUHHVkA3lGqisDPMJHS8ARPoOaSjGtCrhAwz1D78JHLv4L09EiqLT6ZCZmRlxX1ZWFmw2W2hGhm65ubl9DokBgLS0NFit1h6PT0lJGbLFmUj55szMH3HjbysrK9Ha2tqjPT09fdBTnvKbISLlY2AnIkUQQvQZunU6HaZNmwar1YrOzk5otVpkZGREHdv+XRqNBlOmTEF9fX3YaqdZWVlD8RKIhk1ubm5odphuiYmJyMnJkbEqIooVBnYiko3f70dtbW1ohhaz2Yzc3Nxee7u1Wu2gQoper8eECRMG/HgiOWg0GkybNg0dHR1wu92Ij4/vMeMREY1eDOxEJJvDhw+HFiQBAJvNBpfLhRkzZnC5baLvkCQJZrMZZvOJjX8nopGPgZ2IZNHR0REW1rt5vV60tbUhLS3thM/p8XjQ1NSEzs5O6HQ6ZGRkwGg0DkW5RESy8Hq9aGhoQEdHBzQaDdLS0pCeni53WRRjDOxEJIvvLgLS3329PaakpCS06qnL5YLNZsPEiRMjLrZERKR0Pp8PJSUloRvlvV4vqqur4fF4kJubK3N1FEv8zpmIZNHbNIoDmWKxoaEhFNaPx4VliGikam5u7jGrFXBs9We/3y9DRSQXBnYikoXRaITBYOjRrtfrB9Qj3tnZGbHd4/FE/INHRKR0kYYNAsdm1Yq2j0YnBnYiks2kSZOQkZEBrVYLtVqNtLQ0TJkyZUA3nEZbolulUoWtaEpENFL0tiAc144YWziGnXr48MMP8dhjj0Gj0SA1NRUPPfQQ4uPj8dvf/hYHDhyAJEm47bbbsGDBArlLJZkdKq6SfdGVRqsNADA+14xkY891HzvdEjo6/x6TWpSwgiYRjR4ZGRloaWmBEOHvbWazmYF9jGFgpx7uvfde/PnPf0ZaWhoeeeQRvPzyy5g3bx4OHTqEl156CXV1dbjxxhvx2muvyV0qyUgpwbTRagcAZGUkoaMTMCYIdK+/5HJL6Ig8UmZYzJmZr5ifCxGNfHFxcZg0aRJqa2vR1dUFSZKQkpKCvLw8uUujGGNgHyN2796NvXv3wu12o7q6GqtXr8Znn32G6urq0DFmsxnbtm3Djh07QlPq+f1+6PV6TJ8+HU8//TQkSUJ9fT0X7CA8tnmV3CUA+M+y6t1LzQeDQXg8Hmi1Wmg0fIsjopHNZDJh+vTp8Pv9UKlUXKNijOJfszHE6XTi6aefRmVlJW644Qbs2bMn4nEZGRkAgDfffBMff/wxbrnlFgDHVtr77W9/i+3bt+Puu++OVdmkcH6/H52dndBqtUhISJC7HKhUqgHNMkNEpGTsgBjb+vWv/+WXX+Kbb77BsmXL8PXXX2Pu3LnDXRcNg6lTpwIALBYLvF4v1q1bF7GHHQCKioqwZ88e/PGPfwwbJ3frrbdi9erVWLFiBebNm4dx48bF9kWQotTX16OxsTE0vjIxMREFBQVRbwAlIiKiE9dnYN+9ezeefvppeDwenHPOObjxxhtx66234rLLLotFfTSEpO6Bvf+2efPmiMc9+eST+Prrr1FUVIS4uDgAx25EffPNN7Fhwwbo9XpoNJoe56Oxpb29HQ0NDWFtnZ2dqKysxOTJk2WqioiIaPTpcyDUjh07sHPnThgMBqSmpmL37t149tlnY1EbDSEhRI+7zCNpaWnBE088AavVitWrV2PVqlV4/vnnMX/+fASDQVx++eW48sorceWVV/KmlzGutbU1YntHRwe8Xm+MqyEiIhq9+uxhV6lUYYubWCwWzmk8ggQCAdTW1mLChAkYP348SktLkZubi3feeSfi8WlpaSguLo64b+PGjcNZKo0wva2yF2nFUSIiIhqYPnvYk5KS8O2334aGP7z22mswm83DXhgNjYqKirA5XJ1OJ8rKytgDSoMWbaYgnU4XGkpFREREg9dnD/vatWvxi1/8AtXV1Vi0aBH0ej3+93//Nxa10QnYvvN9PPP83rA2jVogPSnyMBhn19/gcIWPQW/69wI0mRlJg67nmivOxFUrFg/6PKRcGRkZaG9vh9vtDrVJkoTc3Fze30BERDSE+gzsBQUF+Mtf/oLq6moEAgFMnDiRUwuNEJpeRi5F2tfw7wVohiKw0+in0WgwdepUtLa2wul0QqvVIi0tjVMqEhERDbE+k/dHH32ELVu24LXXXsPhw4dx5plnYtu2bZzaUWGuWrG4R4+2x+OJOh49JycHWVlZYW3fXYCGqC9qtRoZGRmhufuJxpJAIICWlhY4HA5oNBqkpaWF3fNFRDRU+hzD/utf/xoPPPAAAGDy5Mn4v//7v9A2KZter0dqampYm8/ngyRJoZVMiYjoxAUCAZSVlaG2thZ2ux2tra0oLS1Fc3Oz3KURxUwgEEBTUxPKy8tRXV2Nrq4uuUsatfoM7D6fDzNmzAhtz5gxgzcsjiD5+fnIyckBADQ1NaGjowM+nw+HDx/mLxYR0QC1tLTA5XL1aK+rq0MwGJShIqLY8vv9KCkpQW1tLWw2G5qbm/Htt9/CZrPJXdqo1Gdgj4+Px759+0LbH374oSKWH6f+6e5NV6vVyMzMRGpqKjQaDVwuFw4fPsw/LEREA+BwOOD1emG329HR0RGa5jQQCKCzs1Pm6oiGX1NTU9ikA8CxNV9qamr6te4LnZg+x7CvW7cOP//5z0M3mqpUKmzdunXYC6Oh09bWFnFebJ/PB7vdjuTkZBmqIupdIBBAR0cHJEmCyWSCStVn/wJRzHx3pV+bzYbU1FQkJiZyYgYaEzo6OiK2e71eeDweTu87xPp8VznppJPw3nvvoaysDGq1GhMmTIBOp4tFbTREfD7fgPYRyaWtrQ1VVVWhb4DUajUmTpwYde53oljq7OzsMTRUCIHW1lbOlERjRm8fTLnA5tDrM7B3dXVhz549sNvtEELgwIEDAICf/vSnw14cDY3eZi3gjAakNB6PB0ePHg1rCwQCKC8vx+zZs/mHgAalseYgGqs/x5Ilbw/4HCaTCYmJidDpdGHhPBAI4I9//OOIGxJzqLgKWeNOlrsMGmHS0tIi9rKbzWZotVoZKhrd+gzst956K6xWKwoLC7kYyghlMplgNBrhcDjC2lNSUng/AilOW1tbxPZgMBgadkCkBF6vF16vFxqNBsFgMPQfkVwCgQCCwWBMAnNycjIsFgsaGxtDY9YNBgPy8/OH/bnHoj4De0VFBd544w2OyRvBJEnCpEmT0NzcDJvNBkmSkJKSwuBDitRb4GEYosHKypuLrLy5g1pvorOzEyUlJT3aVSrViPwWqHsNDhq5/H4/qqurYbPZIIRAQkIC8vLyhv1b9OzsbGRkZMDlckGr1XI42DDq8y6u7y6uQyOTSqVCZmYmpkyZgsLCQqSlpfEbE1Iks9k8oH1EsZKYmAiLxRLWJkkSxo8fP+LCOo0O5eXlaG9vD/V0d88EF4tpuDUaDUwmE8P6MOuz27ywsBBXXXUVFi9eHHbHL8ewE9FwMBgMSEtLQ0tLS1h7dnY2b3gnxcjOzkZKSgrsdjskSUJycjLH7ZIsOjs74XQ6e7QHg0G0tLQgOztbhqpoqPUZ2Ds7O5Gfn4/q6upY1ENEhPz8fCQnJ4eGcCUnJ/MGaVKcuLg4Tl1HsuutF50LXY4efQb2Bx54AMCx+TY5pRoRxYrJZOJ7DhFRH3qbPGKoJ5bweDxIiBMIBo/14HN9jNjp8yd99OhRXHDBBbjgggvQ1NSE8847D+Xl5bGojaIIBoNcRYyIiIig1+uRlpYWsX0oJ5eora1FcXExzIkCyUaB4uJiuFyuITs/9a7PwH7//fdj7dq1SE1NRWZmJn784x/jnnvuiUVt9B1OpxMlJSU4ePAgDh06hJqaGs6aQURENMaNGzcOeXl5SEhIgF6vR0ZGBqZMmTJkN0HbbDY0NTWFtfl8PlRUVER9jN/vR11dHUpKSnDkyBHYbLYhqWWs6jOw22w2LFy4MLR95ZVXRry5gYaX2+3G4cOHQwtyBINBWK1WVFVVyVwZ0YnzeDyor69HTU1NaBoyIiIaGEmSkJGRgWnTpmHmzJnIy8sb0pugo62P4fF4Ii4U5vf7UVJSgsbGRnR2dsJut6O8vByNjY1DVtNY06/J1T0eT2gKwObmZvbqyiDaz72trQ05OTmcPYNGjPb2dhw9ejQU0q1WK8xmMwoKCjjVKBFRBLes24FDxfJ10CUbBeJ0x96za+uPhfeHn/g7AKDV/ga8/vD3bkO8gDGhZ0eMEEBTmwSBoXmvnzMzH49tXjUk51K6PnvYV65ciWuvvRatra145JFHsGLFCqxcuTIWtdFx3G531H0ejyeGlRANXDAYRHV1dY8edbvdHrUHh4horDtUXCVrYHcfN9mMyRgPk/HYnOtBAXj9PY/XRenclyRAO0TrcMr9M4m1Pn9sy5cvx/jx4/Hee+/B7/fjvvvuw6JFi4asACEEzjjjDIwfPx4AMGfOHNx2221Ddv7RIiEhAR0dHT3aJUnitGI0YnR2dsLvj/DujmOhnavvEhFFNmdm/qBW6B0MIQTKy8tht9tDbZIkoaCgIOKCdpWVlWhtbY14rpkzZ0Kn08HtdkOj0Qx46M5YW6G3z8D+k5/8BM8++yxOOeWUYSmguroaM2bMwO9///thOf9okZ6ejpaWlh5hJz09nYt10IjR25CX3vZ1dHSgoaEBLpcLOp0OmZmZEWdFICKiodcdzjs6OtDR0QGNRoPU1NSow3HT09MjBnaTyQSn04na2lq43W54PB4kJydj2rRp0GiGqOt9lOrzp+NwOOByuYZ8Ls9uX3/9NZqamrBq1SrExcXhrrvuwsSJE4fluUYynU6HKVOmoL6+Hg6HAxqNBmlpacjIyJC7tAELBAKor69Ha2srgsEgkpKSkJOTA71eL3dpNEwSExOh1+sjDuOK1rvucDhw+PDh0Lbb7UZVVRWCweCIvv6JiEYSSZJgNpsj9qh/V2JiIiZMmIDa2lr4fD4AgNlsRmpqKioqKtDW1gaHwwEAaGlpgdVqxcKFCzlioBd9Bvb4+HicddZZmDJlSlhoH0iP+Msvv4xnn302rO2ee+7B9ddfj/POOw+ffvop1qxZg1deeeWEzz0WxMXFjaoPM+Xl5aFfWODYzYhOpxMzZswYsqmoSFkkScLEiRNx5MiR0Js4AFgslqiLJEWbVaCxsRHp6enDUicREQ1OSkoKkpOTw4a+VFRUwOVyhf3tB44NiTx8+DBmzZolU7XK12dgv/TSS4fsyZYvX47ly5eHtXV1dYXC2bx582C1WiGE4GwRo1xnZ2ePX1jg2Lyura2t7DkdxRISEjBr1izY7Xa88vrHeH73/4dAMPrve0ZyEOoot8c3tb2KQ8XVAIZmPOM1V5yJq1YsHvR5iIjoWCdNfHx8aNvn80WdGtzpdMLtdrOXPYo+A/sll1yCxsZGlJaWYtGiRbBarbBYLENWwLZt25CUlITVq1ejpKQEFouFYT2K7mkdR8NSwL3NetPbPhodJElCUlIStLqEXsM6APgDEtSqntODBcWx/ywZfX89S9QfTqcTXV1d0Ov1Ub/xIaKBMxgMEdfdUKlU0Gg0nDa8F30G9r1792LDhg1QqVR48cUXcf755+M3v/kNvv/97w9JAddffz3WrFmDvXv3Qq1W44EHHhiS844mXq8XNTU1sNvtEELAbDYjLy9vRI/17u0TND9djx1XrVjcZ492R0dH2Bj2brm5ucjMzByu0mgMCQaDOHLkSNi3fgkJCZg8eTJvhKMRp6urK7RgUfdN+v0Zdz6U2tra0NTUBK/Xi8TERFgsFiQmJiIjIwMmk6lHx1xSUhLi4uLCeuMpXJ9dtVu3bsVLL70Ek8mEjIwMPP/883j88ceHrACz2Yz/+7//w3PPPYdnn30WBQUFQ3bu0UAIgcOHD4etBmm321FWVjaiP4kmJiZG7MHSarWc2o/CmEwmFBQUhO6h0el0yMvLY1inIdN9M//xXC4XamtrZaqIaGC6urpQUlKCtrY2eDweOBwOHDlyJOoUi8PBarXi6NGjcLlc8Pv9sNvtKC0thcvlglarxSmnnIKsrCzo9XokJCSEQvy4ceM4wqIXfXYdfHcmhmnTpvEHGkN2uz3iEBGv14v29vYRHW4nTpyI+vp6tLW1IRgMwmw2IycnhzecUg9JSUlISkqSuwwapaIt2tXW1ob8/Hz+zaMRo7GxMWJnXn19PVJSUob9WhZCoKGhIWJ7Y2MjJk6cCL1ej9NOOw3t7e1wOByhjrqRPGogFvo1S0x9fX3oH/nTTz/lDzWGelvFdKSvcKpWq5GXl4e8vDy5SyGiMSzSmNre2olirbHmIBqrP8eSJW/3elxGRkbUTq+mpqZh/2ZepVJF/fYzEAjAarUO2XMdKq5C1riTh+x8StdnYL/ttttwzTXXoLm5GStWrEBlZSW2bt0ai9oI6HU8l9/vx+HDh0NjxLKysjj+m4joBCUlJaGlpaVHu9lsZu86jSiBQCBiYBdCxOQDaDAYjDrTX7RVrql/ogb2t956C+eccw5mzpyJl156CQcPHkQwGMRJJ52ElJSUWNY4pplMJhgMhh7TIPn9flit1tAvhdvths1mw9SpUxnaiYhOQHZ2dmhKuW5arZbf/pFiZOXNRVbeXLz36vpej7PZbCgvL+/RnpmZidzc3OEqL0xdXV3E9TMmT548pLMvDcVUviNJ1MD++OOP45xzzsGKFSvwl7/8BWeeeWYs66LjTJo0CY2NjaFxlmazGW1tbQgEAmHHBQIBNDU1IT8/X44yiYhGJK1Wi2nTpqG9vT00rWNKSgrvp6ERJykpCfn5+aivr4fP54NKpUJ6ejpycnJiVkN2djZUKhWsViv8fj/i4uKQnZ3d77Du9/sRCASg0+nCeuqFEGhvb4fdbodarYZWI+Dzj51vwKIG9sTERJx77rlobGzERRdd1GP/66+/PqyF0X+o1Wrk5OSEfuE8Hg+am5sjHhttQQIiIopOpVKN6Jv4ibqlpaUhNTUVPp8PGo0m5mu3SJIEi8WCrKwsBIPBfn/w9fv9qK6uRnt7O4D/zAiWlJQEIQSOHDmCjo6O0PFpZoGOzmF5CYoUNbDffvvtEEJg3bp1uPvuu2NZE/VBo9FAkqSI49F0Ol3M63G73VCpVLI8NxEREYWTJEn2v8mSJJ3Qt1RHjx4NC+RerxcVFRWYOnUq3G532L5uxkQBv98/JtZLiPoKN23ahL/+9a/IysrC/PnzY1nTmHLLuh04VFx1wo8zJwokxPUM7G0dEjy+gX1F1F1Hf8eF6bQCSQYRWjbe65Ngc6LPlSv7a87MfDy2edWQnIuIiIiUKVogF0Kgubk56g2zEo6NLBgL0/5GDeyBQADXXHMNvv32W9xwww099v/+978f1sLGikPFVThUXIU5M09s3Lm9EwCkUGgPCqCjc+BhHQCyTmCJd7VKIMUkcPyz6bQCKSYJzbYBlxAykA8xRERENPL4fL5e9/U2nfhYudckamD/wx/+gI8++ghHjx7FueeeG8uaxpw5M/P7vPM7mkAgAL/f3+PmjOFWX18fcXEEACgsLITRaBzU+cfa3d9EREQnKhgMwu/3Q6vVjugpSOPj46FSqSLOE5+YmAiz2RxxDvdAEDAYDLEoUXZRA3tWVhYuvvhiZGdnc0iMgqnValk+Xfb1aZiIiIiGhxAC9fX1sFqtCAaD0Gg0sFgsYSvTjyQajQZZWVmor68Pa9fpdEhPT4dGo8G4ceNQW1sbCvWB4LFhwCP5g8qJiBrYf/GLX+B3v/sd7r///oj7OUvM2GYwGCIuNAIc+zRMREREw6OhoSFsrnO/34+amhqo1eoRO9uRxWKBXq9HS0sL/H4/TCYTMjMzQzeUpqenIyUlBQ6HA2q1Gtb2NwCMjbAO9BLYV69eDQCcIYYiSk5OhtVqhcvlCmtPT0/vdawZERERDVz3jZiRWK3WERvYASAlJaXXxTnVavVxN5iOnbAO9BLYZ86cCeBYACsrK0NcXBwKCwthsVhiVhwpl0qlQmFhIaxWK+x2e2gO45H8RkFERKR03ePWI/F6vTGuhmIlamDv7OzEbbfdhk8//RTjx4+HJEkoLy/HkiVL8OCDD8o+vyf1n8/ng9VqhdPphFarRXp6+qBvCgWOfdK1WCz8EEdERBQjarUacXFxcLvdPfZxSOroFXX5q4cffhhZWVn44IMPsGvXLrz88sv44IMPYDAY8Nvf/jaWNdIg+Hw+lJSUoLGxEU6nE+3t7SgrK4s6/pyIiIiUrXvl8+OpVCp2oI1iUXvYP/nkE7z66qthM5DEx8dj7dq1WLFiRUyKo8GzWq0RvyKrq6tDamrqmLm7moiIaLRISkpCYWEhmpqa4PF4kJCQgMzMTCQkJMhdGg2TqIFdo9FEnC4wLi5uzExSPxo4HI6I7X6/H11dXfzlJqIxKRAIoKOjA5IkwWQyQaWK+oUzkSIZjcYew1t9Ph/q6+tht9shSRJSUlJgsVh4fY8CUQN7bz2v0ZaIJeXRarUD2kdENFrF6wW+/PLL0HzOarUaEydOhMlkkrkyooELBoMoKysLG9ve2NgIl8uFyZMny1gZDYWogb2jowNvvfVWxHAerdeWlCc9PR02m61He1JSEgM7EY05apVAkkGEragYCARQUVGBWbNm8RtkGrHa2toi3oja0dGBzs5O3pA6wkUN7NnZ2di+fXvEfbypYeQwmUwYN24c6urqEAgEAABmsxn5+fkyV0ZEFHvxeqC2vg0PP/H3HvtsztfR5YnNfT2NVhsAICsjKSbP15tDxVWYM5N/E0a6rq6uXvcxsI9sUQP7jh07YlkHDaP09HSkpqbC7XZDo9H0e0rO7oDPHiciGi2mTMpCfX3kYZ3Dew++gEoCggIAJDRa7QCUEdjnzMxnYB8Felu0kAsajnxRAzuNLiqVqt83mHq9XtTU1ISG0hiNRowbNw5xcXHDWCER0fDbeOdKlJaWRtw3a9asYVljpLm5GQ0NDfD5fNBoNMjMzMTlP/sjAOC9V9cP+fPR2JSamorGxkb4fL6w9oSEhCFZe4XkxduGKYwQAocPHw4b9+5wOFBWVhbqcSciGqkMBgPS0tJ6tGdnZw9LWG9ra0N1dXUoRPn9ftTV1SExnpM30NBSq9UoLCwM3TzdPUsMbzgdHdjDTmE6Ojoi3rTi8/nQ1taG9PR0GaoiIho6+fn5SE5Ohs1mC4Wa4Rrf29TUFLHdECfQ2cV1MGhoxcXFYfLkyQgGg5AkiWutjCJ9Bva1a9diy5YtYW0333wztm7dOmxFkXw8Hs+A9hERjSQmkykm0zhGe988Ni02e9mp/w4VV2HJ0k1yl6GYG6bH2s3SUQP7hg0b0NTUhM8++wxtbW2hdr/fj4qKipgUR7HX2zh3LrJERHRiEhISIk6F7A9IANj7Sf2jpGCqlBumx9rN0lED+6WXXorDhw+jtLQU5557bqhdrVZj7ty5MSmOYs9gMMBkMqGjoyOsPT4+HsnJyTJVRUQ0MlksFjidzh5rmjhcMhVEI9Jjm1f1ul8IgcbGRjQ3N8Pv98NoNCInJ2dYOtq6e/l5w3RsRQ3ss2bNwqxZs3D66acjKysLwLHZQ4bjphxSloKCAjQ1NaGtrQ1CCCQlJSErK4tj4YiITpDRaERhYSEaGxvR1dUFvV6PzMxMuL18P6WhU1NTg+bm5tB2R0cHnE4npk2bxhneRomogd3r9eLuu+/GOeecEwrsN998M1JSUnD//fdDo+H9qqOVSqWCxWLhAllEREPAYDBg0qRJcpdBo5TP50NLS0uP9mAwiObmZuTl5clQFQ21qNM6Pv7443A6nWHDX+677z7Y7XbecEpERESkAB6Pp8eQq269rX5KI0vUwP7ee+/hkUceQWpqaqgtMzMTv/71r/H222/HpDgiIiIiik6v10cdssrhMKNH1MCu1Woj/kMbDAaOYyciIiJSAK1WG3ExMJVKhYyMDBkqouEQdSC6SqWC0+mEwWAIa3c6nfD7/cNeGMmjs7MTra2tCAaDMJlMSE5O5s2mRERECpaXlwetVhs2S0x2djZ72EeRqIH9wgsvxPr167Fly5bQtEAulwvr16/Hf//3f8esQIodq9WKmpqa0HZraytaW1sxadIkhnYiIiKFkiSJk0WMclGHxPzkJz+B0WjEwoULcdlll+HSSy/FwoULYTKZ8POf/zyWNVIM+P1+1NXV9Wjv6OhAe3u7DBUREREREdDHkJj7778fP/vZz/DNN99ApVJh1qxZyMzMjGV9FCNOpxPBYDDivo6ODqSkpMS4IiIiIiICegns3XJzc5GbmxuLWkhGKlXUL1t63UdEREREw0uWJPbWW2/htttuC20fOnQIy5cvx+WXX45t27bJUdKYZzQao87+c/zUnt8lhIDNZkNtbS2amprg8/mGq0QiIiKiMSnmy5Vu2rQJ+/fvx7Rp00JtGzZswNatW5GXl4frr78e33zzDaZPnx7r0sY0SZJQUFCA8vJyeL1eAMd61nNzc5GYmBjxMcFgEEeOHIHD4Qi11dfXY9KkSTAajTGpm4iIiGi0i3kP+8knn4x77703tO10OuH1ejFu3DhIkoRFixbhwIEDsS6LACQkJGDmzJkoLCxEQUEBZs+ejfT09KjHNzc3h4V14FiIr6qqGu5SiYiIiMaMYethf/nll/Hss8+GtW3ZsgXnn38+Pv7441Dbd+d6T0xMDJtakGJLkqR+947bbLaI7R6PB11dXYiPjx/CyoiIiIjGpmEL7MuXL8fy5cv7PM5gMKCzszO03dnZCZPJNFxl0RDqbW523qhKREQ0eO3t7aEFDc1mM9LT0/k3dgyS/V/cYDBAq9WiuroaQgjs378f8+bNk7usEcXn86Gurg5lZWWoqqqCy+WKyfNGm+oxISEBer0+JjUQERGNVjU1NaioqIDdbofD4UBtbS0OHz4MIYTcpVGMxfym00g2btyI22+/HYFAAIsWLcJJJ50kd0kjhtfrRUlJSWh2FofDgdbWVhQUFMBsNg/rc6empsLpdKK1tTXUptPpMGHChGF9XiIiotHO4/HAarX2aHc6nWhvb+f6KGOMLIF9wYIFWLBgQWh7zpw5eOmll+QoZcRraGjoMZWiEAK1tbXDHtglScL48eORmZkJp9MJrVYLs9nc61AZIiIi6pvT6Yy6z+FwMLCPMYroYR/LGmsOorH6cyxZ8vaAHp+RkQG1Wh1xX1NTU9TVS5XuUHEVssadLHcZREREstBqtQPaR6OT7GPYaXB6C+Qc40ZERDQyGY3GiPeDSZLU64KGNDqxh11mWXlzkZU3F++9un5Aj29tbUVlZWWP9tTUVIwfP35wxcloydJNcpdAREQkG0mSMGnSJBw9ejQ0mYROp8O4ceM4scMYxMA+wqWmpsLj8YQNf0lOTkZeXp7MlREREdFgxMXFYdq0aXC73QgGg4iPj+d9YmMUA/sokJ2djYyMDLjdbuh0Ouh0OrlLIiIioiESFxcndwkkMwb2UUKj0YStGEtEREREowNvOiUiIiIiUjD2sBMRERFRTLS3t6OxsRFdXV2Ij4+HxWJBUlKS3GUpHnvYiYiIiGjYtbW1oaKiAi6XC0IIuFwulJeXw2azyV2a4jGwExEREdGwa2hoOKF2+g8OiaEBc7vdaGxshNPphE6nQ0ZGBr/WIiIioojcbnfE9q6urhhXMvIwsNOAuN1ulJSUIBAIAAA8Hg8cDgfy8/ORlpYmc3VERESkNHFxcRFDO6et7BsDOw1IY2NjKKwfr76+HqmpqWELOzgcDhw+fBgdHR1ITExEYWEhzGZzLMslIiIimWVlZUVcnT0rKyv2xYwwDOxjWHNzM6xWK/x+PwwGA7KzsxEfH9+vx3Z2dkZs9/l88Hq9oWWT29vb8f7778Pv9wM4dsNJfX09TjvtNGRkZAzNCyEiIiLFS01NBXCs08/tdiMuLg4WiwUpKSkyV6Z8DOxjVH19fdhNHjabDR0dHZg2bVq/vprS6XQRv9ZSqVTQaP5zWRUXF4fCerdAIIDi4mJ873vfG8QrICIiopEmNTU1FNyp/zhLzBgUCATQ1NTUoz0YDMJqtfbrHNF6x9PS0qBWq0Pb7e3tEY+z2+0Rh9QQERGR/Hw+H3w+n9xl0L+xh30M8ng8CAaDEfe5XK5+ncNsNmP8+PGor6+H1+uFSqVCWloacnNzw47TarU9etgBQKPRQKXq+XnR5/OhubkZKSaBQAChhRWIiIho+LndblRVVcHpdAIADAYD8vPzeWOozBjYxyCdTgdJkiCE6LHvRH4hU1NTkZKSAp/PFzWA5+XloaysrEd7bm5u2I2pAOD1elFSUgKfzwe9VgBa4Ntvv8WkSZNgMpn6XRcRERGduGAwiLKysrCedafTibKyMsycOTPi33mKDQb2MUij0SAtLQ3Nzc1h7ZIk9etG0EAggPb2dgQCARiNRiQkJEQ9dsaMGejq6kJdXR2CwSAkSUJWVhZmz57d49iGhoYeX78JIVBbW4vp06f389UREVEgEEBrayvcbjfi4+ORkpISNlyRxp7tO9/HM8/v7fWYeL1AkqFnZx4A2Jyvossj4VBxFQBgydJNg6rnmivOxFUrFg/qHGMJA/sYlZeXB7VajebmZgQCASQkJCAnJ6fX8A0c+6R95MiRsPHnaWlpyM/Pj3i8JEk45ZRTMHPmTNhsNphMJiQmJkY8tqOjI2J7V1cXfD4ftFptP18dEdHY5fF4UFpaGtYB0tjYiClTpkCn08lYGSmdupcO9O59lgxOyywHBnYFOFRcNehPqgMnIP37fxutNgBAVkZS1GMzkkXEX+h2hwS3V+q54wSkmQW0mmOf7Gvr25CbfWyaJ0mS2DNERNRPtbW1Pb6t9Hq9qKurw4QJE2SqiuR21YrFffZoOxyOiMNYAWDy5MkcniojBnaZzZkZuWc6diR0f/nVaLUDiB7YdZron77j9YDbO7hKXB7A/O8rMjc7BXk5x6Z9SklJ4bg5IlKM/gwt6MtQDSsAeg4tsNvtEY+z2WyDfi4a3YxGI4xGIxwOR492hnV5MbDL7LHNq+QuIaT7D8d7r66PuL+3T97JycmYOHHioGuora2F1WoN3RBrNpuRl5c36PMSESnJcA4rUKlUEafNZccH9cekSZPQ1NQUmpY5OTkZmZmZMldFDOzUbwaDAVqtNuK8rMnJyUPyHLm5ucjKykJXVxd0Ol1oxVQiIqXoz9ACOaWkpPSYVKC7nagvKpUKFosFFotF7lLoOPy4Tf0mSRLGjx/fo5cmJSVlyAI7cGwWG6PRyLBORDQAOTk5MBgMYW1GoxHZ2dkyVUREg8UedjohJpMJs2bNQltbW2hax+/+YSAiIvmo1WpMmTIFTqczNK1jtNm5iGhkYGCnE6bRaPo1XzsREcnHYDCwQ4VolOCQGCIiIiIiBWMP+wjR1dWFlpYW+P1+GAwGpKam8o5/IiIiojGAgX0EaG9vR0VFRWi7ra0NLS0tKCws5IJCRERERKMcu2gVTgiB6urqHu0ulwstLS0yVEREREREscQedoVzuVzw+/0R99nt9mFfzMBut8Nms0GSJKSkpPAGJiIiIqIYY2BXuN6GvAz3cJiqqqqwXvzm5mZkZ2dzMQUiIiKiGOKQGIWLi4uLOn9uWlrasD2v0+mMOOSmvr4eXq932J6XiIiIiMIxsI8AEyZMQHx8fGhbkiRkZ2fDbDYP23Pa7fYB7SMiIiKiocUhMSOAXq/H9OnT0dnZCZ/PB4PBAI1meP/pepsyktNJEhEREcUOA7tC2Ww2NDU1wePxIDExEVlZWTFdWjolJQX19fU92tVqNZKSkmJWBxEREdFYx65SBWppaUF5eTmcTid8Ph9sNhtKS0vR2dkZsxr0ej3Gjx8f1puu0WgwceJEzv1OREREFEOy9LC/9dZb2LNnDx555JHQ9kMPPRSafeTmm2/G/Pnz5ShNdkIINDQ0RGxvbGxEQUFBzGpJTU1FUlISOjo6IEkSTCYTh8MQERERxVjMA/umTZuwf/9+TJs2LdRWXFyMNWvW4Nxzz411OYoTCASizsLicrliXM2xITDJyckxf14iIiIiOibm3aUnn3wy7r333rC2r7/+Gq+88gquuOIKPPjgg1EXChoL1Gp11CEner0+xtUQERERkdyGLbC//PLLuPDCC8P++/LLL3H++edDkqSwYxcuXIi7774bf/7zn+FyufDiiy8OV1mKJ0kSMjIyIu6L1k5EREREo9ewDYlZvnw5li9f3q9jf/SjH8FkMgEAzj77bPzzn/8crrJGhO6x/FarFYFAAHq9HhaLhbOzEBEREY1Bsk/rKITAD3/4Q7z44ovIysrChx9+iBkzZshdlqy6F0ayWCwIBALDPuc6ERERESmX7ElQkiRs2rQJN910E+Li4lBQUIDLLrtM7rIUQZIkhnUiIiKiMU6WNLhgwQIsWLAgtL1o0SIsWrRIjlKIiIiIiBSNk2oTERERESkYAzsRERERkYIxsBMRERERKRgDOxERERGRgjGwExEREREpGAM7EREREZGCMbATERERESkYAzsRERERkYIxsBMRERERKRgDOxERERGRgjGwExEREREpGAM7EREREZGCMbCPQsFgEIFAQO4yTogQAn6/X+4yiIiIiBRHI3cBNHS8Xi+qq6tht9sBACaTCePGjYNer5e5suiEEGhoaEBzczP8fj/0ej2ys7ORkpIid2lEREREisAe9lFCCIGysrJQWAeAjo4OlJWVIRgMylhZ7xoaGtDQ0BDqXfd4PDh69GjY6yAiIiIay9jDPko889xbePvdjyLuszn/ii6P1Oc5DhVXAQCWLN006HquueJMXLVica/HCCFgtVoj7mtqaoLZbB50HUREREQjHQP7KBEMRh//rVH37xyWjNgGZL/fH3WsvcfjiWktRERERErFwD5KrLhkEU6emRlxX0FBAZKSkmJbUD9oNBrodDp4vd4e+xISEmSoiIiIiEh5OIZ9lDCZTDAYDD3aExISFDu0RJIkWCyWiO1ZWVkyVERERESkPOxhH0UmT56MhoYGtLe3AwCSkpJgsVggSX2PX5dLWloa1Go1rFYrPB4PEhISYLFYkJiYKHdpRERERIrAwD6KqFQq5OTkICcnR+5STkhycjKSk5PlLoOIiIhIkTgkhoiIiIhIwRjYiYiIiIgUjIGdiIiIiEjBGNiJiIiIiBSMgZ2IiIiISMEY2ImIiIiIFIyBnYiIiIhIwRjYiYiIiIgUjIGdiIiIiEjBGNiJiIiIiBSMgZ2IiIiISMEY2ImIiIiIFIyBnYiIiIhIwRjYiYiIiIgUjIGdiIiIiEjBGNiJiIiIiBSMgZ2IiIiISME0sXwyh8OBNWvWwOl0wufz4c4778TcuXNx6NAhbN68GWq1GosWLcJNN90Uy7KIiIiIiBQrpj3sf/rTn3DqqafiueeewwMPPID77rsPALBhwwY88sgjeOGFF/DFF1/gm2++iWVZRERERESKFdMe9quvvho6nQ4AEAgEoNfr4XQ64fV6MW7cOADAokWLcODAAUyfPj2WpRERERERKdKwBfaXX34Zzz77bFjbli1bMHv2bDQ3N2PNmjVYu3YtnE4nDAZD6JjExETU1NQMV1lERERERCPKsAX25cuXY/ny5T3aS0tL8ctf/hK/+tWvMH/+fDidTnR2dob2d3Z2wmQyDVdZRERERCNOMBhEU1MTWltbIYSA2WyGxWKBVquVuzSKgZiOYT9y5Ah+8Ytf4JFHHsGZZ54JADAYDNBqtaiuroYQAvv378e8efNiWRYRERGRoh09ehT19fXweDzwer1obm5GWVkZgsGg3KVRDMR0DPsjjzwCr9eLzZs3AzgW1p988kls3LgRt99+OwKBABYtWoSTTjoplmURERERKZbL5YLNZuvR7na70dbWhrS0tJjVIoSAw+GA0WiEJEkxe96xLqaB/cknn4zYPmfOHLz00kuxLIWIiIhoRHC5XAPaN9SEEPjlL3+JgwcPYu7cuXj00UcZ2mOECycRERERKZherx/QvqHmcDhw8OBBBINBHDx4EA6HI2bPPdYxsBMREREpmNFoREJCQo92jUaD1NTUmNYxd+5cqFQqzJ07F0ajMWbPPdbFdEgMEREREZ24SZMmoaamBjabDUIIGI1G5OXlQaOJXZSTJAmPPvoox7DLgIGdiIiISOG0Wi0mTpyIYDAIIQTUarUsdUiSxOm3ZcDATkRERDRCqFQczTwW8V+diIiIiEjBGNiJiIiIiBSMgZ2IiIiISMEY2ImIiIiIFIyBnYiIiIhIwRjYiYiIiIgUjIGdiIiIiEjBGNiJiIiIiBRsRC6cVFdXh2XLlsldBhERERHRkKmrq4vYLgkhRIxrISIiIiKifuKQGCIiIiIiBWNgJyIiIiJSMAZ2IiIiIiIFY2AnIiIiIlIwBnYiIiIiIgVjYCciIiIiUjAGdiIiIiIiBWNgJyIiIiJSsBG50ulo9eKLL2Lr1q1IS0uD0+nEz3/+89CKrv/4xz/wzDPPwOv1wu/347zzzsNNN90UekxqaipcLhduuukmXHzxxYN6/kjnevHFF7Ft2zakpqZCCIHx48djzZo1+Oijj/Dcc88BAEpLSzFlyhQAwIIFC7B27dpB/0xIftGui2jXRF5eHl5++WVFXRe8tul4fK8lJRoN77V9vZbufSPt9SiCIMXYuHGjeP7554UQQhQXF4v58+cLIYTYvXu3uOSSS0RDQ4MQQgiXyyW2b9/e4zFffPFF6DGDff7vnmvjxo1i586doe3nn39eLF26VASDQSGEEI2NjWLJkiUDfm5SrmjXRV/XhBDKuS54bdPx+F5LSjQa3mu7DeYaF0J5r0cJOCRGQUpLSzFx4kQAQFZWFgKBAJxOJx588EH87ne/Q1ZWFgAgPj4eq1atCj1mwoQJAIDc3FxotdpBPX+0c5WWlmLy5Mmh7ZUrV6KlpQUNDQ0AgLKyMhQWFg74uUm5ol0XfV0TgHKuC17bdDy+15ISjYb32m6DucYB5b0eJWBgV5CysjIUFBRACIHt27djyZIlePvttzF79mzk5eVFfcyECRMghMBzzz2HW2+9dVDPH+1chw8fDvsFAwC9Xo+Ojo7QY7+7/7vsdvuAayP5RLsu+romuh/73WPkuA54bdPxRvt7LY1MQ/1eK6fBXOPdj+/t9YzF91wGdoVoaGiAy+XCtddei0svvRQdHR3YsGEDysrKMG3atKiP6ezsxPXXX4/TTjsNn332WWgcZrerr74aF154YY//3n777X6fq6GhAQkJCTAYDKHjfT4fmpubkZubC+DYL2Bfn4YfeOCBHm1CCDz22GN9/nxIHtGui/5cE0Dk6yLSddBt3bp1/a6N1zYNxFh4r+2vE/l9o+E1HO+1A9XbddGf63yw13h/Xs9YfM/lTacKUVZWhlNPPRVPP/10WHtCQgLcbnfUx8ybNw/bt2+H3W7HhRdeiIMHD+Lkk08OHVNUVNTv5492rkifdHfv3o1TTz019EtXVlaGq6++OrS/oaEBTzzxBIxGIxYvXgy/34+Kigr88Y9/xNKlS3HTTTfh7LPPxsUXXwy/34/W1lZcd911WLRoEY4ePYrHH38cKhU/T8ot2nXhcDj6vCa6H3/8dbFv377QdbB48WLs378f1157LTZu3Ig1a9agvLwcW7duRUVFBR599FH4/X5s3boVXV1dEEJg/fr1oXPJdW0D4df3/PnzeW2PIKP9vbapqQm5ubkoLy9HVVUVVq1ahVdeeQU333wztm7dCrvdjqSkJFx33XU9ft8kSerXa6ChN9TvtcN1XfTnOh/sNd7X6xmr77kj/xWMEqWlpZg6dWqP9jPOOAN79uxBS0sLAMDr9eKll14KPWb69OkAALPZjAsvvBB79+4d8PNHO9d3x5vt378fTz31FO644w4AQDAYRGVlZWhMKABUVFRAq9Vi1apVOP3005GcnIwf/vCHuO666/Dtt9/iggsuwPXXX4+SkhJMmzYNX331FS644ALcdtttSElJgc1mG9DroKEV7bro65oAIl8X370Ouq95l8uFkpIS/OAHP8DNN98Mo9EIh8OBl156CW63GyaTCQ6HY0hfQ/e+E722gfDrOy0tjdf2CDLa32tNJhM6OztRWVkJrVaLXbt2YcWKFWhqaoLf74fJZMLBgwfxzTff9Ph9I/kM9XutnNfFYK7x/ryesfqey8CuEMdPX3S82bNn46abbsK1116Liy66CEuXLkVra2voMcd/hfu9731vUH9Eop2rtLQUr7/+OpYtW4ZLLrkEf/nLX/DHP/4RBQUFAICqqipkZWVBp9OFHr9w4UL8+Mc/xn333YempqawP5IlJSVYuHBh6P9PnToVX331VWi/0+lESkrKgF4HDa1o10Vf1wQQ+bo4/jrovuadTickScKXX34Z+h3o6uqCyWTCN998g9tvvx0333wzHnrooSF9Dd37TvTaBsKv7/379/PaHkFG+3ut2WzG3/72N5x55pno6uqC0+lERkYGHnvsMaxevRqXXHIJMjIyIv6+kXyG+r1WzutiMNd4f17PWH3PlYQQQu4iaPT5zW9+g2AwCI/Hg7vuugv79u3Dm2++ieuvvx5PP/00Nm3aBJVKhbVr12LTpk24/fbbkZGRga6uLvzgBz/AaaedJvdLoGHwr3/9K3QdfP7556ioqIBGo4HRaER1dTWSkpLQ0dGBCy64AAsWLMA777yDv/3tb8jKysKpp56KM844Q+6XACD8+j799NPx1ltv8domWXz3vfbo0aO48847sXv3bqxcuRJr167FrFmz8Mwzz8DpdMJms2HChAkoLS3t8ftGo8douy74nsvATgqxZs0a/OY3v5G7DKIhx2ubiCh2Rut7LgM7EREREZGCcQw7EREREZGCMbATERERESkYAzsRERERkYIxsBMRERERKRgDOxERERGRgjGwExEREREpGAM7EdEJqq2txZQpU3DllVf22HfXXXdhypQpaGtr6/UcX375Je65555ej/n4449x4YUXDqpWAJg7dy5qa2sj7vv8889x7bXXYunSpbjwwgtx/fXXo6ysbNDPOZT+9a9/YdOmTXKXQUQkG43cBRARjUR6vR6VlZWoq6tDTk4OAMDlcuGzzz7r1+OPHDmCpqam4SyxT5988gnWrFmDbdu2YebMmQCA1157DatWrcI//vEPxSzpffbZZ+Pss8+WuwwiItkwsBMRDYBarcZ5552H119/HTfccAMA4M0338TZZ5+NZ555BgAQDAaxZcsWfPHFF+js7IQQAps2bUJ2djYef/xxOBwO3HXXXXjggQewa9cu/OlPf4JKpUJycjIeeughAMc+BNx6662oqKiAx+PBpk2bMG/ePHi9Xjz88MP45JNPEAgEMH36dKxfvx4GgwGffvop7r//fkiShFmzZiEYDEZ8DY8//jhuvPHGUFgHgB/+8IfQ6/UIBAIAgJ07d2LHjh1QqVRIS0vD3Xff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\n",
      "text/plain": [
       "<Figure size 756x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "f = plt.figure(figsize=[10.5,5])\n",
    "\n",
    "df = pd.melt(Ctdiffs)\n",
    "order = ['PCR_minus_RDTstr','RDTtube_minus_RDTstr','PCR_minus_RDTswab','RDTswab_minus_RDTstr']\n",
    "labels = [\"$PCR - RDT_{strip}$\",'$RDT_{tube} - RDT_{strip}$',\\\n",
    "          '$PCR - RDT_{swab}$','$RDT_{swab} - RDT_{strip}$']\n",
    "\n",
    "ax = sns.stripplot(data=df, x=\"variable\", y=\"value\", order=order, **args_stripplot)\n",
    "sns.boxplot(x=\"variable\", y=\"value\", order=order, data=df, **args_boxplot)\n",
    "add_n_XX(df,'variable','value',order,ax,offset=-.5,max=True)\n",
    "\n",
    "plt.plot(np.arange(-.5,4,.5),[0]*9,'k:',alpha=.5)\n",
    "\n",
    "ax.set_ylabel('Ct Difference', fontsize=12)\n",
    "ax.set_xticklabels(labels)\n",
    "ax.set_xlabel('Matched Comparisons', fontsize=12)\n",
    "ax.get_legend().remove()\n",
    "\n",
    "save_figure('fig/CT_matched_comparisons.svg')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "d9052d41",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=[5,5])\n",
    "\n",
    "df = pd.melt(Genome_diffs2)\n",
    "order = ['Strip','Swab','Buffer']\n",
    "\n",
    "sns.boxplot(x=\"variable\", y=\"value\", order=order, data=df, **args_boxplot)\n",
    "ax = sns.stripplot(data=df, x=\"variable\", y=\"value\", order=order, **args_stripplot)\n",
    "add_n_XX(df,'variable','value',order,ax,offset=-.02,max=True)\n",
    "\n",
    "ax.set_ylabel('Difference in\\nPercent Genome Assembled', fontsize=12)\n",
    "ax.set_xlabel('Matched Comparisons with PCR Swab', fontsize=12)\n",
    "ax.get_legend().remove()\n",
    "\n",
    "save_figure('fig/genomic_matched_comparisons.svg')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "39bc6490",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "# samples Ct>32: 24\n",
      "Spearman r^2: 0.6393824392270028 \n",
      "Spearman p value: 1.0983644261318508e-14\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 756x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=[10.5,5])\n",
    "\n",
    "df = combined.copy().rename({'category':'Category'})\n",
    "locs = np.where([len(i)==3 for i in df.ID])[0]\n",
    "df.loc[locs,'Category'] = df.loc[locs,'variable']\n",
    "df.loc[np.where(df.variable=='Bswab')[0],'Category'] = 'Swab'\n",
    "df.loc[np.where(df.variable=='Qtube')[0],'Category'] = 'Buffer'\n",
    "df.loc[np.where(df.variable=='Rnan')[0],'Category'] = 'PCR'\n",
    "df['Lineage'] = ['B' in str(l) for l in combined.pango_lineage]\n",
    "\n",
    "order = ['PCR','Swab','Strip','Buffer']\n",
    "ax = sns.scatterplot(data=df, x=\"value\", y=\"Percent\",hue_order=order,hue='Category',palette='rocket',\\\n",
    "                     style='Lineage',style_order=[True,False], markers={False:'X',True:'o'})\n",
    "\n",
    "plt.plot([32,32],[0,1],'k:', alpha=.5)\n",
    "plt.plot([18,41],[.7,.7],'k:', alpha=.5)\n",
    "\n",
    "plt.ylabel(\"Percent Genome Assembled\", fontweight='normal', fontsize=12)\n",
    "plt.xlabel(\"Ct Value\", fontweight='normal', fontsize=12) ;\n",
    "print('# samples Ct>32:',len(combined[combined.value>32].dropna(subset=['assembly_length_unambiguous'])))\n",
    "\n",
    "save_figure('fig/genomic_CT.svg')\n",
    "\n",
    "result = stats.spearmanr(df.value, df.Percent, nan_policy='omit')\n",
    "print('Spearman r^2:', result.statistic**2, '\\nSpearman p value:', result.pvalue)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ec5e6bdd",
   "metadata": {},
   "source": [
    "## Relevant stats"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "afe560af",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PCR_minus_RDTstr\n",
      "pvalue: 2.384185791015625e-07\n",
      "difference: -10.15989620995116\n",
      "std: 4.294519294305085\n",
      "# individuals: 23 \n",
      "\n",
      "PCR_minus_RDTswab\n",
      "pvalue: 0.0546875\n",
      "difference: -4.14251557218143\n",
      "std: 5.160297928503\n",
      "# individuals: 9 \n",
      "\n",
      "RDTswab_minus_RDTstr\n",
      "pvalue: 0.00019643672621231134\n",
      "difference: -6.948094608932407\n",
      "std: 4.592566831496211\n",
      "# individuals: 19 \n",
      "\n",
      "RDTtube_minus_RDTstr\n",
      "pvalue: 0.9249783071207602\n",
      "difference: 0.31179125763572757\n",
      "std: 3.922703141402506\n",
      "# individuals: 16 \n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/jsilbert/opt/miniconda3/lib/python3.9/site-packages/scipy/stats/_morestats.py:3414: UserWarning: Exact p-value calculation does not work if there are zeros. Switching to normal approximation.\n",
      "  warnings.warn(\"Exact p-value calculation does not work if there are \"\n"
     ]
    }
   ],
   "source": [
    "for col in Ctdiffs.columns:\n",
    "    print(col)\n",
    "    print('pvalue:',stats.wilcoxon(Ctdiffs[col].dropna()).pvalue)\n",
    "    print('difference:',Ctdiffs[col].dropna().mean())\n",
    "    print('std:',Ctdiffs[col].dropna().std())\n",
    "    print('# individuals:',len(Ctdiffs[col].dropna()),'\\n')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "d6d6f643",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Diff PCR v. matched RDT swabs\n",
      "PCR 0.9810339144185247\n",
      "RDT 0.6694837116199521\n",
      "Diff PCR v. matched RDT strips\n",
      "PCR 0.9714443366886265\n",
      "RDT 0.5063104036384309\n"
     ]
    }
   ],
   "source": [
    "print('Diff PCR v. matched RDT swabs')\n",
    "print('PCR',combined[combined.variable=='Bswab'].Percent.mean()-Genome_diffs['Bswab'].dropna().mean())\n",
    "print('RDT',combined[combined.variable=='Bswab'].Percent.mean())\n",
    "print('Diff PCR v. matched RDT strips')\n",
    "ppl = sum([len(Genome_diffs[col].dropna()) for col in ['Bstr','Qstr','inan']])\n",
    "rdt = sum([len(Genome_diffs[col].dropna())*combined[combined.variable==col].Percent.mean() \\\n",
    "           for col in ['Bstr','Qstr','inan']]) / ppl\n",
    "pcr = sum([len(Genome_diffs[col].dropna())*\\\n",
    "           (combined[combined.variable==col].Percent.mean()-Genome_diffs[col].dropna().mean()) \\\n",
    "           for col in ['Bstr','Qstr','inan']]) / ppl\n",
    "print('PCR',pcr)\n",
    "print('RDT',rdt)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "6a89ebaa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Bswab\n",
      "pvalue: 0.078125\n",
      "difference: -0.31155020279857254\n",
      "average % for all of this category: 0.6694837116199521\n",
      "# individuals: 7 \n",
      "\n",
      "Bstr\n",
      "pvalue: 0.5\n",
      "difference: -0.7471992776644484\n",
      "average % for all of this category: 0.22766946460221382\n",
      "# individuals: 2 \n",
      "\n",
      "Qtube\n",
      "pvalue: 1.0\n",
      "difference: -0.06397351436310739\n",
      "average % for all of this category: 0.9298398154031368\n",
      "# individuals: 1 \n",
      "\n",
      "Qstr\n",
      "pvalue: 0.0625\n",
      "difference: -0.3267297595558974\n",
      "average % for all of this category: 0.659973915660636\n",
      "# individuals: 5 \n",
      "\n",
      "inan\n",
      "pvalue: 0.25\n",
      "difference: -0.5077639924645242\n",
      "average % for all of this category: 0.4359651762922338\n",
      "# individuals: 3 \n",
      "\n",
      "All \n",
      "pvalue: 7.62939453125e-05 \n",
      "difference -0.38312023691417063\n"
     ]
    }
   ],
   "source": [
    "for col in Genome_diffs.columns:\n",
    "    print(col)\n",
    "    print('pvalue:',stats.wilcoxon(Genome_diffs[col].dropna()).pvalue)\n",
    "    print('difference:',Genome_diffs[col].dropna().mean())\n",
    "    print('average % for all of this category:',combined[combined.variable==col].Percent.mean())\n",
    "    print('# individuals:',len(Genome_diffs[col].dropna()),'\\n')\n",
    "\n",
    "All = Genome_diffs.values.flatten()\n",
    "print('All','\\npvalue:',stats.wilcoxon(All, nan_policy='omit').pvalue,'\\ndifference',np.nanmean(All))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "09f35632",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Strip\n",
      "pvalue: 7.62939453125e-05\n",
      "difference: -11456.444444444445\n",
      "# individuals: 18 \n",
      "\n",
      "Buffer\n",
      "pvalue: 1.0\n",
      "difference: -1913.0000000000002\n",
      "# individuals: 1 \n",
      "\n",
      "Swab\n",
      "pvalue: 0.078125\n",
      "difference: -9316.285714285714\n",
      "# individuals: 7 \n",
      "\n"
     ]
    }
   ],
   "source": [
    "for col in Genome_diffs2.columns:\n",
    "    print(col)\n",
    "    print('pvalue:',stats.wilcoxon(Genome_diffs2[col].dropna()).pvalue)\n",
    "    print('difference:',Genome_diffs2[col].dropna().mean()*LENGTH)\n",
    "    print('# individuals:',len(Genome_diffs2[col].dropna()),'\\n')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "d2d00ff9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SignificanceResult(statistic=inf, pvalue=1.228065916480943e-18)\n",
      "95.06172839506173\n",
      "SignificanceResult(statistic=107.63636363636364, pvalue=4.3140601498624945e-12)\n",
      "85.18518518518519\n"
     ]
    }
   ],
   "source": [
    "#Across sample types, the ability to designate a lineage demonstrated perfect concordance with\n",
    "#genome assembly of at least 70% (Fisher’s p val, Figure 4B) and a concordance of XX% with Ct < 32 \n",
    "#(Fisher’s p val).\n",
    "\n",
    "bin_assembled = np.array(combined.Percent >= .7)\n",
    "bin_lineage   = np.array(['B' in str(c) for c in combined.pango_lineage])\n",
    "bin_Ct32      = np.array(combined.value < 32)\n",
    "\n",
    "# Fisher's test for genome assembly >= / < 70%; v. lineage designated or not\n",
    "ftest_1 = [[sum(bin_assembled & bin_lineage), sum(bin_assembled & ~bin_lineage)],\\\n",
    "          [sum(~bin_assembled & bin_lineage), sum(~bin_assembled & ~bin_lineage)]]\n",
    "print(stats.fisher_exact(ftest_1))\n",
    "print(100*(ftest_1[0][0]+ftest_1[1][1]) / (sum(ftest_1[0])+sum(ftest_1[1])))\n",
    "\n",
    "# Fisher's test for Ct </> 32; v. lineage designated or not\n",
    "ftest_2 = [[sum(bin_Ct32 & bin_lineage), sum(bin_Ct32 & ~bin_lineage)],\\\n",
    "          [sum(~bin_Ct32 & bin_lineage), sum(~bin_Ct32 & ~bin_lineage)]]\n",
    "print(stats.fisher_exact(ftest_2))\n",
    "print(100*(ftest_2[0][0]+ftest_2[1][1]) / (sum(ftest_2[0])+sum(ftest_2[1])))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "34c1d973",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "# Synthetic comparisons"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1b2670f0",
   "metadata": {
    "heading_collapsed": true,
    "hidden": true
   },
   "source": [
    "## Set up data tables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "9e0c6f0b",
   "metadata": {
    "hidden": true,
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# elution time\n",
    "elution_time = elution.copy()\n",
    "elution_time['Type'] = elution_time['Category'].str.split(pat='(-)',expand=True).iloc[:,2]\n",
    "elution_time['Time'] = elution_time['Category'].str.split(pat='(-)',expand=True).iloc[:,0]\n",
    "elution_time['Ct Mean'] = pd.to_numeric(elution_time['Ct Mean'], errors='coerce').replace(np.nan,40)\n",
    "elution_time.rename(columns={'Time':'variable','Ct Mean':'value'}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "9775ab22",
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "# elution buffer\n",
    "buffer_order = ['AVL','LB','0.5LB','VTM','TE'] # translating from samples s## to what the buffer was\n",
    "buffer_df = PCR_results(buffer)\n",
    "buffer_df = buffer_df[buffer_df['Sample Name'].str.startswith(('s','H2O'))].rename(columns={'CT':'value'})\n",
    "buffer_df['variable'] = ['Water Control' if s=='H2O' else \\\n",
    "                         buffer_order[int(np.floor((int(s[1:])-1)/3))] for s in buffer_df['Sample Name']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "618ec4c0",
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "# rotating or not rotating -- some data points will be for box and whisker, and some just for scatter plots\n",
    "rotation_df = PCR_results(rotation)\n",
    "rot_dict = {\"1hr: Rotation\": rotation_df[rotation_df['Sample Name'].str.contains('HR')]['CT'].values,\n",
    "            \"10m: Rotation\": rotation_df[rotation_df['Sample Name'].str.contains('\\d+R')]['CT'].values,\n",
    "            \"10m: No Rotation\": rotation_df[rotation_df['Sample Name'].str.contains('\\d+R')]['CT'].values}\n",
    "rotation_box = pd.melt(pd.DataFrame.from_dict(rot_dict, orient='index').T)\n",
    "rot_dict.update({\"water\":rotation_df[rotation_df['Sample Name'].str.contains('H2O')].CT.values,\n",
    "                 \"viral seedstock\":rotation_df[rotation_df['Sample Name'].str.contains('POS')].CT.values})\n",
    "rotation_dot = pd.melt(pd.DataFrame.from_dict(rot_dict, orient='index').T).dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "19ad0645",
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "# affect of time difference between seeding & extraction\n",
    "seeding_sample = PCR_results(seeding)\n",
    "seeding_sample['Type'] = seeding_sample['Sample Name'].str.split(pat='(_)',expand=True).iloc[:,0]\n",
    "seeding_sample['Day'] = pd.to_numeric([t[-1] for t in seeding_sample.Type], errors='coerce')\n",
    "seeding_sample['variable'] = seeding_sample['Sample Name'].str.split(pat='(_)',expand=True).iloc[:,2]\n",
    "seeding_sample['variable'] = ['Strip' if n in ['1','2','3'] else n for n in seeding_sample.variable]\n",
    "seeding_sample['variable'] = ['Seedstock' if n in ['pos'] else n for n in seeding_sample.variable]\n",
    "seeding_sample = seeding_sample[[x is not None for x in seeding_sample.variable]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "67e94b2b",
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "#Kingfisher v. Column extractions\n",
    "kff = PCR_results(KFFcomp).rename(columns={'CT':'value'})\n",
    "kff[['variable','details']] = kff['Sample Name'].str.split(pat='(_)',expand=True)[[0,2]]\n",
    "kff = kff[[d is not None for d in kff.details]].reset_index(drop=True)\n",
    "for nonsample in ['H2O','Stock']:\n",
    "    kff.loc[kff.details==nonsample,'variable'] = nonsample"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83fafc99",
   "metadata": {
    "heading_collapsed": true,
    "hidden": true
   },
   "source": [
    "## Box and whisker plots"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "1623789a",
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "sns.set_style(\"white\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "7d4c1036",
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/jsilbert/opt/miniconda3/lib/python3.9/site-packages/statannotations/_Plotter.py:337: UserWarning: Invalid x-position found. Are the same parameters passed to seaborn and statannotations calls? or are there few data points?\n",
      "  warnings.warn(\n",
      "/Users/jsilbert/opt/miniconda3/lib/python3.9/site-packages/statannotations/_Plotter.py:337: UserWarning: Invalid x-position found. Are the same parameters passed to seaborn and statannotations calls? or are there few data points?\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "p-value annotation legend:\n",
      "      ns: p <= 1.00e+00\n",
      "       *: 1.00e-02 < p <= 5.00e-02\n",
      "      **: 1.00e-03 < p <= 1.00e-02\n",
      "     ***: 1.00e-04 < p <= 1.00e-03\n",
      "    ****: p <= 1.00e-04\n",
      "\n",
      "24h vs. 1h: p=0.19\n",
      "1h vs. 10m: p=0.12\n",
      "24h vs. 10m: p=1\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df = elution_time[(elution_time.Type!='tube') & (elution_time.Type!='PosCtrl')]\n",
    "order = ['10m','1h','24h','NTC']\n",
    "\n",
    "f, ax = plt.subplots(1,1,figsize=[5,5])\n",
    "sns.stripplot(data=df, x=\"variable\", y=\"value\", order=order, **args_stripplot)\n",
    "sns.boxplot(x=\"variable\", y=\"value\", data=df, order=order, **args_boxplot)\n",
    "add_n_XX(df,'variable','value',order,ax,offset=.65,max=False)\n",
    "\n",
    "ax.set_ylim([41,19])\n",
    "plt.yticks(np.arange(20,45,5))\n",
    "\n",
    "pairs = [['24h','1h'],['24h','10m'],['1h','10m']]\n",
    "annotator = Annotator(ax, pairs,data=df,x='variable',y='value')\n",
    "#annotator.set_pvalues(get_pvalues2(df,pairs))\n",
    "pvalues = get_pvalues2(df,pairs)\n",
    "annotator.set_custom_annotations([f'p={p:.2g}' for p in pvalues])\n",
    "annotator.annotate()\n",
    "df_wilcoxon = save_wilcoxon_variances('Elution Time', df, pairs, df_wilcoxon)\n",
    "\n",
    "ax.set_xlabel('Elution Time', fontsize=12)\n",
    "ax.set_ylabel('Ct Values', fontsize=12)\n",
    "ax.get_legend().remove()\n",
    "\n",
    "save_figure('fig/synthetic_elution_time.svg')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "b4179c67",
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/jsilbert/opt/miniconda3/lib/python3.9/site-packages/statannotations/_Plotter.py:337: UserWarning: Invalid x-position found. Are the same parameters passed to seaborn and statannotations calls? or are there few data points?\n",
      "  warnings.warn(\n",
      "/Users/jsilbert/opt/miniconda3/lib/python3.9/site-packages/statannotations/_Plotter.py:337: UserWarning: Invalid x-position found. Are the same parameters passed to seaborn and statannotations calls? or are there few data points?\n",
      "  warnings.warn(\n",
      "/Users/jsilbert/opt/miniconda3/lib/python3.9/site-packages/statannotations/_Plotter.py:337: UserWarning: Invalid x-position found. Are the same parameters passed to seaborn and statannotations calls? or are there few data points?\n",
      "  warnings.warn(\n",
      "/Users/jsilbert/opt/miniconda3/lib/python3.9/site-packages/statannotations/_Plotter.py:337: UserWarning: Invalid x-position found. Are the same parameters passed to seaborn and statannotations calls? or are there few data points?\n",
      "  warnings.warn(\n",
      "/Users/jsilbert/opt/miniconda3/lib/python3.9/site-packages/statannotations/_Plotter.py:337: UserWarning: Invalid x-position found. Are the same parameters passed to seaborn and statannotations calls? or are there few data points?\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "p-value annotation legend:\n",
      "      ns: p <= 1.00e+00\n",
      "       *: 1.00e-02 < p <= 5.00e-02\n",
      "      **: 1.00e-03 < p <= 1.00e-02\n",
      "     ***: 1.00e-04 < p <= 1.00e-03\n",
      "    ****: p <= 1.00e-04\n",
      "\n",
      "TE vs. AVL: p=0.4\n",
      "AVL vs. VTM: p=0.2\n",
      "TE vs. VTM: p=0.2\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "f = plt.figure(figsize=[5,5])\n",
    "\n",
    "order = ['TE','AVL','VTM','LB','0.5LB','Water Control']\n",
    "ax = sns.boxplot(x='variable',y='value',data=buffer_df,order=order,**args_boxplot)\n",
    "sns.stripplot(data= buffer_df,order=order,x=\"variable\", y=\"value\",**args_stripplot)\n",
    "add_n_XX(buffer_df,'variable','value',order,ax,offset=.65,max=False)\n",
    "\n",
    "ax.set_ylim([41,19])\n",
    "plt.yticks(np.arange(20,45,5))\n",
    "\n",
    "pairs = [['TE','AVL'],['TE','VTM'],['AVL','VTM']]\n",
    "annotator = Annotator(ax, pairs,data=buffer_df,order=order,x='variable',y='value')\n",
    "#annotator.set_pvalues(get_pvalues2(buffer_df,pairs))\n",
    "pvalues = get_pvalues2(buffer_df,pairs)\n",
    "annotator.set_custom_annotations([f'p={p:.2g}' for p in pvalues])\n",
    "annotator.annotate()\n",
    "df_wilcoxon = save_wilcoxon_variances('Buffer type', buffer_df, pairs, df_wilcoxon)\n",
    "\n",
    "plt.xlabel(\"Buffer Type\", fontweight='normal', fontsize=12)\n",
    "plt.ylabel(\"Ct Values\", fontweight='normal', fontsize=12) \n",
    "plt.legend([],[], frameon=False);\n",
    "\n",
    "save_figure('fig/synthetic_buffer_type.svg')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "0b65fd83",
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/jsilbert/opt/miniconda3/lib/python3.9/site-packages/statannotations/_Plotter.py:337: UserWarning: Invalid x-position found. Are the same parameters passed to seaborn and statannotations calls? or are there few data points?\n",
      "  warnings.warn(\n",
      "/Users/jsilbert/opt/miniconda3/lib/python3.9/site-packages/statannotations/_Plotter.py:337: UserWarning: Invalid x-position found. Are the same parameters passed to seaborn and statannotations calls? or are there few data points?\n",
      "  warnings.warn(\n",
      "/Users/jsilbert/opt/miniconda3/lib/python3.9/site-packages/statannotations/_Plotter.py:337: UserWarning: Invalid x-position found. Are the same parameters passed to seaborn and statannotations calls? or are there few data points?\n",
      "  warnings.warn(\n",
      "/Users/jsilbert/opt/miniconda3/lib/python3.9/site-packages/statannotations/_Plotter.py:337: UserWarning: Invalid x-position found. Are the same parameters passed to seaborn and statannotations calls? or are there few data points?\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "p-value annotation legend:\n",
      "      ns: p <= 1.00e+00\n",
      "       *: 1.00e-02 < p <= 5.00e-02\n",
      "      **: 1.00e-03 < p <= 1.00e-02\n",
      "     ***: 1.00e-04 < p <= 1.00e-03\n",
      "    ****: p <= 1.00e-04\n",
      "\n",
      "10m: No Rotation vs. 10m: Rotation: p=1\n",
      "10m: Rotation vs. 1hr: Rotation: p=0.6\n",
      "10m: No Rotation vs. 1hr: Rotation: p=0.6\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "f = plt.figure(figsize=[5,5])\n",
    "order = ['10m: No Rotation','10m: Rotation','1hr: Rotation','water']\n",
    "ax = sns.boxplot(x='variable',y='value',data=rotation_dot,order=order,**args_boxplot)\n",
    "sns.stripplot(data= rotation_dot,order=order,x=\"variable\", y=\"value\", **args_stripplot)\n",
    "add_n_XX(rotation_dot,'variable','value',order,ax,offset=.65,max=False)\n",
    "\n",
    "ax.set_ylim([41,19])\n",
    "plt.yticks(np.arange(20,45,5))\n",
    "\n",
    "pairs = [[order[0],order[1]],[order[0],order[2]],[order[1],order[2]]]\n",
    "annotator = Annotator(ax, pairs, data=rotation_dot, order=order, x='variable', y='value')\n",
    "#annotator.set_pvalues(get_pvalues2(rotation_dot,pairs))\n",
    "pvalues = get_pvalues2(rotation_dot,pairs)\n",
    "annotator.set_custom_annotations([f'p={p:.2g}' for p in pvalues])\n",
    "annotator.annotate()\n",
    "df_wilcoxon = save_wilcoxon_variances('Rotation', rotation_dot, pairs, df_wilcoxon)\n",
    "\n",
    "ax.set_xticklabels(['10 min\\nNo rotation','10 min\\nRotation','1 hour\\nRotation','Water\\nControl'])\n",
    "\n",
    "plt.xlabel(\"Rotation\", fontweight='normal', fontsize=12,visible=False)\n",
    "plt.ylabel(\"Ct Values\", fontweight='normal', fontsize=12)\n",
    "plt.legend([],[], frameon=False);\n",
    "\n",
    "save_figure('fig/synthetic_rotation.svg')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "abecc1af",
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/jsilbert/opt/miniconda3/lib/python3.9/site-packages/statannotations/_Plotter.py:337: UserWarning: Invalid x-position found. Are the same parameters passed to seaborn and statannotations calls? or are there few data points?\n",
      "  warnings.warn(\n",
      "/Users/jsilbert/opt/miniconda3/lib/python3.9/site-packages/statannotations/_Plotter.py:337: UserWarning: Invalid x-position found. Are the same parameters passed to seaborn and statannotations calls? or are there few data points?\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "p-value annotation legend:\n",
      "      ns: p <= 1.00e+00\n",
      "       *: 1.00e-02 < p <= 5.00e-02\n",
      "      **: 1.00e-03 < p <= 1.00e-02\n",
      "     ***: 1.00e-04 < p <= 1.00e-03\n",
      "    ****: p <= 1.00e-04\n",
      "\n",
      "ColumnExtract vs. KFFfromAVL: p=0.2\n",
      "KFFfromAVL vs. KFFwithKFFBuffer: p=0.4\n",
      "ColumnExtract vs. KFFwithKFFBuffer: p=0.2\n",
      "diff in ct: -2.040767166666665\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-66-38564ba378da>:24: FutureWarning: Dropping of nuisance columns in DataFrame reductions (with 'numeric_only=None') is deprecated; in a future version this will raise TypeError.  Select only valid columns before calling the reduction.\n",
      "  ct_diff = (kff[kff.variable=='KFFfromAVL'].mean()+kff[kff.variable=='KFFwithKFFBuffer'].mean())/2\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "f = plt.figure(figsize=[5,5])\n",
    "order = ['ColumnExtract','KFFfromAVL', 'KFFwithKFFBuffer','H2O']\n",
    "\n",
    "ax = sns.stripplot(data=kff, x=\"variable\", y=\"value\", order=order, **args_stripplot)\n",
    "sns.boxplot(x=\"variable\", y=\"value\", data=kff, order=order, **args_boxplot)\n",
    "add_n_XX(kff,'variable','value',order,ax,offset=.65,max=False)\n",
    "\n",
    "ax.set_ylim([41,19])\n",
    "plt.yticks(np.arange(20,45,5))\n",
    "\n",
    "pairs = [['ColumnExtract','KFFfromAVL'],['ColumnExtract','KFFwithKFFBuffer'],['KFFfromAVL','KFFwithKFFBuffer']]\n",
    "annotator = Annotator(ax, pairs,data=kff,order=order,x='variable',y='value')\n",
    "#annotator.set_pvalues(get_pvalues2(kff,pairs))\n",
    "pvalues = get_pvalues2(kff,pairs)\n",
    "annotator.set_custom_annotations([f'p={p:.2g}' for p in pvalues])\n",
    "annotator.annotate()\n",
    "df_wilcoxon = save_wilcoxon_variances('KFF', kff, pairs, df_wilcoxon)\n",
    "\n",
    "ax.set_xlabel('Extraction Method', fontsize=12)\n",
    "ax.set_xticklabels(['Manual','Automatic\\n(AVL Buffer)','Automatic\\n(KFF Buffer)','Water Control'])\n",
    "ax.set_ylabel('Ct Values', fontsize=12)\n",
    "ax.get_legend().remove()\n",
    "\n",
    "ct_diff = (kff[kff.variable=='KFFfromAVL'].mean()+kff[kff.variable=='KFFwithKFFBuffer'].mean())/2\n",
    "ct_diff = (kff[kff.variable=='ColumnExtract'].value.mean()-ct_diff).value\n",
    "print('diff in ct:',ct_diff)\n",
    "\n",
    "save_figure('fig/synthetic_extraction_method.svg')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a2a652d7",
   "metadata": {
    "heading_collapsed": true,
    "hidden": true
   },
   "source": [
    "## Linear regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "3b1e52ac",
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "sns.set_style(\"white\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "d3193168",
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Linregress Results for Strips:\n",
      "slope = -0.06 \n",
      "CI = -0.23 to 0.10 \n",
      "p = 0.4463694111099027\n",
      "\n",
      "Linregress Results for Seedstock:\n",
      "slope = 0.33 \n",
      "CI = 0.07 to 0.58 \n",
      "p = 0.047916512267600554\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=[10,5])\n",
    "\n",
    "ax = sns.swarmplot(data=seeding_sample[seeding_sample.variable!='Ctrl'], x=\"Day\", y=\"CT\",**args_scatterplot_2x)\n",
    "sns.regplot(x='Day', y= 'CT', data=seeding_sample[seeding_sample.variable=='Strip'],\\\n",
    "            scatter=False,truncate=False, line_kws = {'color':'grey'})\n",
    "sns.regplot(x='Day', y= 'CT', data=seeding_sample[seeding_sample.variable=='Seedstock'],\\\n",
    "            scatter=False,truncate=False, line_kws = {'color':'black'})\n",
    "\n",
    "ax.invert_yaxis()\n",
    "\n",
    "plt.xlabel(\"Days left at Room Temperature\", fontweight='normal', fontsize=12)\n",
    "plt.ylabel(\"Ct Values\", fontweight='normal', fontsize=12) \n",
    "\n",
    "ax.set_ylim([43,17])\n",
    "\n",
    "handles, labels = ax.get_legend_handles_labels()\n",
    "ax.legend(handles=handles[0:], labels=['Synthetic RDT Strip','Seedstock']);\n",
    "\n",
    "#stats\n",
    "slope95CI(seeding_sample[seeding_sample.variable=='Strip']['Day'],\\\n",
    "          seeding_sample[seeding_sample.variable=='Strip']['CT'],'Strips')\n",
    "slope95CI(seeding_sample[seeding_sample.variable=='Seedstock']['Day'],\\\n",
    "          seeding_sample[seeding_sample.variable=='Seedstock']['CT'],'Seedstock')\n",
    "\n",
    "save_figure('fig/synthetic_days_at_room_temp.svg')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "db14a35a",
   "metadata": {},
   "source": [
    "# Wilcoxon variances"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "cc3ad702",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_wilcoxon['F test statistic'] = df_wilcoxon['Variance (1)']**2 / df_wilcoxon['Variance (2)']**2\n",
    "df_wilcoxon['F test statistic'] = [a if a>1 else 1/a for a in df_wilcoxon['F test statistic']]\n",
    "df_wilcoxon['p value'] = [1-stats.f.cdf(df_wilcoxon['F test statistic'].loc[i], \\\n",
    "                                        df_wilcoxon['Group Size (1)'].loc[i]-1,\\\n",
    "                                        df_wilcoxon['Group Size (2)'].loc[i]-1) for i in range(len(df_wilcoxon))]\n",
    "df_wilcoxon['Similar variances?'] = [p>.05 for p in df_wilcoxon['p value']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "71ee8663",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Comparison</th>\n",
       "      <th>Group 1</th>\n",
       "      <th>Group Size (1)</th>\n",
       "      <th>Variance (1)</th>\n",
       "      <th>Group 2</th>\n",
       "      <th>Group Size (2)</th>\n",
       "      <th>Variance (2)</th>\n",
       "      <th>F test statistic</th>\n",
       "      <th>p value</th>\n",
       "      <th>Similar variances?</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Ct Difference from PCR</td>\n",
       "      <td>iHealth</td>\n",
       "      <td>6</td>\n",
       "      <td>16.446366</td>\n",
       "      <td>Binax</td>\n",
       "      <td>9</td>\n",
       "      <td>11.706935</td>\n",
       "      <td>1.973574</td>\n",
       "      <td>0.187339</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Ct Difference from PCR</td>\n",
       "      <td>iHealth</td>\n",
       "      <td>6</td>\n",
       "      <td>16.446366</td>\n",
       "      <td>Quickvue</td>\n",
       "      <td>8</td>\n",
       "      <td>19.207736</td>\n",
       "      <td>1.363994</td>\n",
       "      <td>0.341363</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Ct Difference from PCR</td>\n",
       "      <td>Binax</td>\n",
       "      <td>9</td>\n",
       "      <td>11.706935</td>\n",
       "      <td>Quickvue</td>\n",
       "      <td>8</td>\n",
       "      <td>19.207736</td>\n",
       "      <td>2.691944</td>\n",
       "      <td>0.104789</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Test Order</td>\n",
       "      <td>First</td>\n",
       "      <td>11</td>\n",
       "      <td>25.835558</td>\n",
       "      <td>Second</td>\n",
       "      <td>11</td>\n",
       "      <td>21.297348</td>\n",
       "      <td>1.471583</td>\n",
       "      <td>0.276253</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Ct Values</td>\n",
       "      <td>Bstr</td>\n",
       "      <td>9</td>\n",
       "      <td>25.648745</td>\n",
       "      <td>Bswab</td>\n",
       "      <td>9</td>\n",
       "      <td>38.943385</td>\n",
       "      <td>2.305341</td>\n",
       "      <td>0.129354</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Ct Values</td>\n",
       "      <td>Buffer</td>\n",
       "      <td>10</td>\n",
       "      <td>3.893900</td>\n",
       "      <td>Strip</td>\n",
       "      <td>10</td>\n",
       "      <td>8.843487</td>\n",
       "      <td>5.157955</td>\n",
       "      <td>0.011308</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Ct Values</td>\n",
       "      <td>Buffer</td>\n",
       "      <td>10</td>\n",
       "      <td>3.893900</td>\n",
       "      <td>Swab</td>\n",
       "      <td>10</td>\n",
       "      <td>12.953915</td>\n",
       "      <td>11.067067</td>\n",
       "      <td>0.000704</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Ct Values</td>\n",
       "      <td>Swab</td>\n",
       "      <td>10</td>\n",
       "      <td>12.953915</td>\n",
       "      <td>Strip</td>\n",
       "      <td>10</td>\n",
       "      <td>8.843487</td>\n",
       "      <td>2.145631</td>\n",
       "      <td>0.135421</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Ct Values</td>\n",
       "      <td>Qstr</td>\n",
       "      <td>6</td>\n",
       "      <td>29.252368</td>\n",
       "      <td>Qtube</td>\n",
       "      <td>6</td>\n",
       "      <td>13.811937</td>\n",
       "      <td>4.485521</td>\n",
       "      <td>0.062574</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Elution Time</td>\n",
       "      <td>24h</td>\n",
       "      <td>5</td>\n",
       "      <td>0.196841</td>\n",
       "      <td>1h</td>\n",
       "      <td>5</td>\n",
       "      <td>1.775235</td>\n",
       "      <td>81.335582</td>\n",
       "      <td>0.000439</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Elution Time</td>\n",
       "      <td>24h</td>\n",
       "      <td>5</td>\n",
       "      <td>0.196841</td>\n",
       "      <td>10m</td>\n",
       "      <td>5</td>\n",
       "      <td>0.632499</td>\n",
       "      <td>10.324954</td>\n",
       "      <td>0.022014</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Elution Time</td>\n",
       "      <td>1h</td>\n",
       "      <td>5</td>\n",
       "      <td>1.775235</td>\n",
       "      <td>10m</td>\n",
       "      <td>5</td>\n",
       "      <td>0.632499</td>\n",
       "      <td>7.877573</td>\n",
       "      <td>0.035207</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Buffer type</td>\n",
       "      <td>TE</td>\n",
       "      <td>3</td>\n",
       "      <td>0.037313</td>\n",
       "      <td>AVL</td>\n",
       "      <td>3</td>\n",
       "      <td>0.430924</td>\n",
       "      <td>133.379546</td>\n",
       "      <td>0.007442</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Buffer type</td>\n",
       "      <td>TE</td>\n",
       "      <td>3</td>\n",
       "      <td>0.037313</td>\n",
       "      <td>VTM</td>\n",
       "      <td>3</td>\n",
       "      <td>5.777930</td>\n",
       "      <td>23979.051498</td>\n",
       "      <td>0.000042</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Buffer type</td>\n",
       "      <td>AVL</td>\n",
       "      <td>3</td>\n",
       "      <td>0.430924</td>\n",
       "      <td>VTM</td>\n",
       "      <td>3</td>\n",
       "      <td>5.777930</td>\n",
       "      <td>179.780575</td>\n",
       "      <td>0.005532</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Rotation</td>\n",
       "      <td>10m: No Rotation</td>\n",
       "      <td>3</td>\n",
       "      <td>0.049708</td>\n",
       "      <td>10m: Rotation</td>\n",
       "      <td>3</td>\n",
       "      <td>0.049708</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Rotation</td>\n",
       "      <td>10m: No Rotation</td>\n",
       "      <td>3</td>\n",
       "      <td>0.049708</td>\n",
       "      <td>1hr: Rotation</td>\n",
       "      <td>3</td>\n",
       "      <td>0.174397</td>\n",
       "      <td>12.309037</td>\n",
       "      <td>0.075137</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Rotation</td>\n",
       "      <td>10m: Rotation</td>\n",
       "      <td>3</td>\n",
       "      <td>0.049708</td>\n",
       "      <td>1hr: Rotation</td>\n",
       "      <td>3</td>\n",
       "      <td>0.174397</td>\n",
       "      <td>12.309037</td>\n",
       "      <td>0.075137</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>KFF</td>\n",
       "      <td>ColumnExtract</td>\n",
       "      <td>3</td>\n",
       "      <td>0.027340</td>\n",
       "      <td>KFFfromAVL</td>\n",
       "      <td>3</td>\n",
       "      <td>0.352913</td>\n",
       "      <td>166.623711</td>\n",
       "      <td>0.005966</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>KFF</td>\n",
       "      <td>ColumnExtract</td>\n",
       "      <td>3</td>\n",
       "      <td>0.027340</td>\n",
       "      <td>KFFwithKFFBuffer</td>\n",
       "      <td>3</td>\n",
       "      <td>0.256717</td>\n",
       "      <td>88.168196</td>\n",
       "      <td>0.011215</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>KFF</td>\n",
       "      <td>KFFfromAVL</td>\n",
       "      <td>3</td>\n",
       "      <td>0.352913</td>\n",
       "      <td>KFFwithKFFBuffer</td>\n",
       "      <td>3</td>\n",
       "      <td>0.256717</td>\n",
       "      <td>1.889839</td>\n",
       "      <td>0.346040</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                Comparison           Group 1 Group Size (1)  Variance (1)  \\\n",
       "0   Ct Difference from PCR           iHealth              6     16.446366   \n",
       "1   Ct Difference from PCR           iHealth              6     16.446366   \n",
       "2   Ct Difference from PCR             Binax              9     11.706935   \n",
       "3               Test Order             First             11     25.835558   \n",
       "4                Ct Values              Bstr              9     25.648745   \n",
       "5                Ct Values            Buffer             10      3.893900   \n",
       "6                Ct Values            Buffer             10      3.893900   \n",
       "7                Ct Values              Swab             10     12.953915   \n",
       "8                Ct Values              Qstr              6     29.252368   \n",
       "9             Elution Time               24h              5      0.196841   \n",
       "10            Elution Time               24h              5      0.196841   \n",
       "11            Elution Time                1h              5      1.775235   \n",
       "12             Buffer type                TE              3      0.037313   \n",
       "13             Buffer type                TE              3      0.037313   \n",
       "14             Buffer type               AVL              3      0.430924   \n",
       "15                Rotation  10m: No Rotation              3      0.049708   \n",
       "16                Rotation  10m: No Rotation              3      0.049708   \n",
       "17                Rotation     10m: Rotation              3      0.049708   \n",
       "18                     KFF     ColumnExtract              3      0.027340   \n",
       "19                     KFF     ColumnExtract              3      0.027340   \n",
       "20                     KFF        KFFfromAVL              3      0.352913   \n",
       "\n",
       "             Group 2 Group Size (2)  Variance (2)  F test statistic   p value  \\\n",
       "0              Binax              9     11.706935          1.973574  0.187339   \n",
       "1           Quickvue              8     19.207736          1.363994  0.341363   \n",
       "2           Quickvue              8     19.207736          2.691944  0.104789   \n",
       "3             Second             11     21.297348          1.471583  0.276253   \n",
       "4              Bswab              9     38.943385          2.305341  0.129354   \n",
       "5              Strip             10      8.843487          5.157955  0.011308   \n",
       "6               Swab             10     12.953915         11.067067  0.000704   \n",
       "7              Strip             10      8.843487          2.145631  0.135421   \n",
       "8              Qtube              6     13.811937          4.485521  0.062574   \n",
       "9                 1h              5      1.775235         81.335582  0.000439   \n",
       "10               10m              5      0.632499         10.324954  0.022014   \n",
       "11               10m              5      0.632499          7.877573  0.035207   \n",
       "12               AVL              3      0.430924        133.379546  0.007442   \n",
       "13               VTM              3      5.777930      23979.051498  0.000042   \n",
       "14               VTM              3      5.777930        179.780575  0.005532   \n",
       "15     10m: Rotation              3      0.049708          1.000000  0.500000   \n",
       "16     1hr: Rotation              3      0.174397         12.309037  0.075137   \n",
       "17     1hr: Rotation              3      0.174397         12.309037  0.075137   \n",
       "18        KFFfromAVL              3      0.352913        166.623711  0.005966   \n",
       "19  KFFwithKFFBuffer              3      0.256717         88.168196  0.011215   \n",
       "20  KFFwithKFFBuffer              3      0.256717          1.889839  0.346040   \n",
       "\n",
       "    Similar variances?  \n",
       "0                 True  \n",
       "1                 True  \n",
       "2                 True  \n",
       "3                 True  \n",
       "4                 True  \n",
       "5                False  \n",
       "6                False  \n",
       "7                 True  \n",
       "8                 True  \n",
       "9                False  \n",
       "10               False  \n",
       "11               False  \n",
       "12               False  \n",
       "13               False  \n",
       "14               False  \n",
       "15                True  \n",
       "16                True  \n",
       "17                True  \n",
       "18               False  \n",
       "19               False  \n",
       "20                True  "
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_wilcoxon"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "c33baa3f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11 suitable for ranksums, out of 21\n"
     ]
    }
   ],
   "source": [
    "print(df_wilcoxon['Similar variances?'].sum(),'suitable for ranksums, out of',len(df_wilcoxon))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "97aaec78",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.5"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {
    "height": "calc(100% - 180px)",
    "left": "10px",
    "top": "150px",
    "width": "165px"
   },
   "toc_section_display": true,
   "toc_window_display": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
